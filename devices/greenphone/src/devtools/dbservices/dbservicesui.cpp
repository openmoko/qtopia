/****************************************************************************
**
** Copyright (C) 2000-2006 TROLLTECH ASA. All rights reserved.
**
** This file is part of the Phone Edition of the Qtopia Toolkit.
**
** This software is licensed under the terms of the GNU General Public
** License (GPL) version 2.
**
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#include "dbservicesui.h"
#include "dboperation.h"
#include "service.h"

#include <QProgressBar>
#include <QVBoxLayout>
#include <QLabel>
#include <QTimer>

#include <qdebug.h>

#include <qtopiaapplication.h>

/*!
  \class
  \brief Perform out-of-band operations on the Qtopia SQL database.

  This utility performs a range of maintenance and meta-operations
  on the Qtopia SQL database.  The operations are principally
  invoked as services, but in some cases may be activated via a UI.

  Currently implemented operations include restoring a database
  generated by an earlier version of Qtopia into a new system
  database, following a Qtopia update (eg reflashing).

  This includes PIM data, category information and so on.

  If started as a service the backup or restore operation will run
  automatically, displaying only a progress dialog.
*/

/*!
  Construct a DbServicesUi object with \a parent and \a flags.

  This method also sets up the DbServices receiver, and a
  delayed call to the init() method.

  \sa init()
*/
DbServicesUi::DbServicesUi(QWidget* parent, Qt::WFlags flags )
    : QDialog( parent, flags )
{
    setWindowTitle( tr( "Data Save/Restore" ));
    QVBoxLayout *vb = new QVBoxLayout( this );
    vb->setSpacing( 2 );
    vb->setMargin( 2 );

    description = new QLabel( tr( "Data Restore" ));
    vb->addWidget( description );
    progress = new QProgressBar( this );
    vb->addWidget( progress );

    qDebug() << "Construct DbServicesUi";

    dispatcher = new DbServices( this );

    QtopiaApplication* qtopiaApp = qobject_cast<QtopiaApplication*>( qApp );
    Q_ASSERT( qtopiaApp );
    if ( qtopiaApp->willKeepRunning() )
        QTimer::singleShot( 0, this, SLOT(init()) );
}

/*!
  Destroy the DbServicesUi object.
*/
DbServicesUi::~DbServicesUi()
{
}

/*!
  After construction, respond to the delayed call made above by
  finishing setup and UI display.

  Note that if the DbServicesUi instance is created via a
  DbServices message, then the return to the event loop will
  cause the program to exit since no running task is registered.

  In that case this method will never be called.

  \sa DbServicesUi()
*/
void DbServicesUi::init()
{
    qDebug() << "init()";
    op = DbOperation::factory();
}
