#!/bin/sh

# This script defines the system-wide rules to secure the
# SXE linux operating system.  The rules go from most general
# (at the beginning) to most specific (at the end).

# LIDS will complain with a "you must protect your object|subject"
# error if a specific rule is not preceded by a general rule.

# Note:  the env vars $BASE_DIR, $QTOPIA_DIR and the $PATH
# are set by the "sxe_boot" script which calls this script.

# The base CAP capabilities are set in the files in the 
# /etc/lids/lids.*.cap

#  Make sure that you have compiled the kernel with
# CONFIG_SECURITY_NETWORK on for the LIDS_SOCKET* rules
# to work

# Globally disable outbound connections and new sockets
# lidsconf -A -o LIDS_SOCKET_CREATE -j DISABLE
# lidsconf -A -o LIDS_SOCKET_CONNECT -j DISABLE

# Protect main system directories
lidsconf -A -o /proc -j READONLY
lidsconf -A -o /proc/lids -j DENY

# Protect /dev
lidsconf -A POSTBOOT -o /dev -j DENY

# protect all block devices
#/usr/bin/find /dev -type b -exec lidsconf -A POSTBOOT -o '{}' -j DENY \;

# These character devices are safe
lidsconf -A POSTBOOT -o /dev/null -j WRITE
lidsconf -A POSTBOOT -o /dev/zero -j WRITE
lidsconf -A POSTBOOT -o /dev/tty -j WRITE
lidsconf -A POSTBOOT -o /dev/urandom -j READONLY
lidsconf -A POSTBOOT -o /dev/random -j READONLY

# All Qtopia apps, including downloaded ones, require readonly access permissions.
lidsconf -A POSTBOOT -o /dev/fb -j READONLY

# Protect default tar.gz images
lidsconf -A -o /var.tar.gz -j DENY

lidsconf -A -o /fs.ver -j READONLY

lidsconf -A -o /etc -j READONLY
#lidsconf -A -o /etc/lids -j DENY
#lidsconf -A -o /etc/lids -j READONLY

# Protect system files
lidsconf -A -o / -j READONLY
lidsconf -A -o /bin -j READONLY
lidsconf -A -o /lib -j READONLY
lidsconf -A -o /sbin -j READONLY
lidsconf -A -o /usr -j READONLY
lidsconf -A -o /var/log -j READONLY
#lidsconf -A -o /tmp -j READONLY

# Grant privileges to user storage
lidsconf -A -o /home -j WRITE
lidsconf -A -o /mnt -j WRITE

# Protect the init scripts - these generally have special privileges
# and should not be read or executed after boot
lidsconf -A POSTBOOT -o /sbin/busybox-secure -j DENY
lidsconf -A POSTBOOT -o /etc/rc.d -j READONLY
lidsconf -A POSTBOOT -s /sbin/init -o /bin/kill -j READONLY
lidsconf -A POSTBOOT -s /sbin/init -o /tmp -i 1 -j WRITE

# Grant privileges to busybox-secure
lidsconf -A POSTBOOT -s /sbin/busybox-secure -o /dev/ttyS2 -j WRITE
lidsconf -A POSTBOOT -s /sbin/busybox-secure -o /dev/console -j WRITE
lidsconf -A SHUTDOWN -s /sbin/busybox-secure -o CAP_SYS_BOOT -j GRANT

# Grant privileges to init scripts
for i in /etc/rc.d/*.sh; do
    if [ "$i" != "/etc/rc.d/*.sh" ]; then
        lidsconf -A POSTBOOT -s "$i" -o CAP_KILL -j GRANT
    fi
done

lidsconf -A -s /etc/rc.d/rc.usbnet -o /etc -i 1 -j WRITE

# Grant privileges to lids utilities
lidsconf -A -s /sbin/lidsadm -o /proc/sys/lids/locks -j WRITE
lidsconf -A -s /sbin/lidsadm -o /etc/lids -j WRITE
lidsconf -A -s /sbin/lidsconf -o /etc/lids -j WRITE

# Busybox if used should be compiled in two or possibly more
# seperate units, since lids applies rules to the targets of
# symlinks, not the symlinks themselves.  This means that if eg
# CAP_SYS_RAWIO is given to /sbin/fsck then /bin/ls also gets
# that privilege; since both point to /bin/busybox.  Non-privileged
# busybox applets should be compiled into a seperate binary.

# Grant init scripts access to /sbin progs
lidsconf -A POSTBOOT -s /etc/rc.d/rc.modules -o /sbin/insmod -j READONLY
#lidsconf -A BOOT -s /etc/init.d/mount -o /sbin/fsck.ext2 -j READONLY
#lidsconf -A BOOT -s /etc/init.d/mount -o /bin/mount -j READONLY
#lidsconf -A BOOT -s /etc/init.d/modules -o /sbin/insmod -j READONLY
#lidsconf -A BOOT -s /etc/init.d/modules -o /sbin/rmmod -j READONLY
#lidsconf -A BOOT -s /etc/init.d/syslog -o /sbin/syslogd -j READONLY
#lidsconf -A BOOT -s /etc/init.d/syslog -o /sbin/klogd -j READONLY
#lidsconf -A BOOT -s /etc/init.d/network -o /sbin/ifup -j READONLY
#/bin/touch /etc/network/interfaces
#lidsconf -A BOOT -s /etc/init.d/network -o /etc/network/interfaces -i 2 -j WRITE
#lidsconf -A -s /etc/init.d/halt -o CAP_KILL -i 2 -j GRANT

# Load modules
lidsconf -A -s /sbin/insmod -o /proc/sys/kernel/tainted -j WRITE
lidsconf -A -s /sbin/insmod -o CAP_SYS_MODULE -j GRANT
lidsconf -A -s /sbin/rmmod -o CAP_SYS_MODULE -j GRANT

# Ensure this works for whatever file-systems are used
lidsconf -A POSTBOOT -s /sbin/fsck -o CAP_SYS_RAWIO -i 1 -j GRANT
/usr/bin/find /dev -type b -name 'tffs*' -exec lidsconf -A POSTBOOT -s /sbin/fsck -o '{}' -i 1 -j WRITE \;
/usr/bin/find /dev -type b -name 'mmca*' -exec lidsconf -A POSTBOOT -s /sbin/fsck -o '{}' -i 1 -j WRITE \;
lidsconf -A -s /bin/mount -o CAP_SYS_ADMIN -j GRANT
lidsconf -A -s /bin/mount -o CAP_NET_BIND_SERVICE 0-1023 -j GRANT
/usr/bin/find /dev -type b -name 'tffs*' -exec lidsconf -A POSTBOOT -s /bin/mount -o '{}' -j READONLY \;
/usr/bin/find /dev -type b -name 'mmca*' -exec lidsconf -A POSTBOOT -s /bin/mount -o '{}' -j READONLY \;
lidsconf -A -s /bin/umount -o CAP_SYS_ADMIN -j GRANT

# Protect lids password file
lidsconf -A POSTBOOT -o /etc/lids/lids.secret -j DENY
lidsconf -A -s /etc/rc.d/rc.lids -o /etc/lids/lids.secret -j READONLY

# HWClock
lidsconf -A SHUTDOWN -s /sbin/hwclock -o /etc -j WRITE

# chroot
lidsconf -A POSTBOOT -o /usr/sbin/chroot -j DENY
lidsconf -A POSTBOOT -s /usr/sbin/chroot -o CAP_SYS_CHROOT -j GRANT

# Protect the logs
# syslogd uses the -s SIZE and -b NUM options to rotate the logs so therefore
# needs WRITE permission and not just APPEND.  Note also that since
# /var/log/messages is rotated its inode number changes, and thus protections
# must be applied to the directory as a whole.
mkdir -p /mnt/documents/log

lidsconf -A POSTBOOT -o /mnt/documents/log -j DENY
lidsconf -A POSTBOOT -s /sbin/syslogd -o /mnt/documents/log -j WRITE

lidsconf -A -s /etc/rc.d/rc.syslog -o /sbin/syslogd -j READONLY
lidsconf -A -s /sbin/syslogd -o /var/log -j WRITE
lidsconf -A POSTBOOT -s /sbin/syslogd -o /dev -j WRITE
lidsconf -A -s /etc/rc.d/rc.klogd -o /sbin/klogd -j READONLY
lidsconf -A -s /sbin/klogd -o CAP_SYS_ADMIN -j GRANT

# On a device there is usually not an interactive shell.  These
# rules are therefore only required in the VTE for use with an
# interactive shell and can probably be removed for a device.

# Make sure bash can work
lidsconf -D POSTBOOT -s /bin/sh -o /dev/tty1 2>/dev/null
lidsconf -A POSTBOOT -s /bin/sh -o /dev/tty1 -j WRITE
lidsconf -D POSTBOOT -s /bin/sh -o /dev/tty2 2>/dev/null
lidsconf -A POSTBOOT -s /bin/sh -o /dev/tty2 -j WRITE
#/bin/touch /.ash_history
#lidsconf -A -s /bin/sh -o /.ash_history -j WRITE

# Networking
lidsconf -A POSTBOOT -s /sbin/ifconfig -o CAP_NET_ADMIN -j GRANT
lidsconf -A POSTBOOT -s /sbin/iwconfig -o CAP_NET_ADMIN -j GRANT
lidsconf -A POSTBOOT -s /sbin/wpa_supplicant -o CAP_NET_ADMIN -j GRANT
lidsconf -A POSTBOOT -s /sbin/wpa_supplicant -o CAP_NET_RAW -j GRANT

# inetd
lidsconf -A POSTBOOT -o /usr/sbin/inetd -j DENY
lidsconf -A POSTBOOT -s /etc/rc.d/rc.inetd -o /usr/sbin/inetd -j READONLY
lidsconf -A POSTBOOT -s /usr/sbin/inetd -o CAP_NET_BIND_SERVICE 0-1023 -j GRANT

# Bluetooth
lidsconf -A POSTBOOT -s /usr/sbin/hcid -o CAP_NET_RAW -j GRANT
lidsconf -A POSTBOOT -s /usr/sbin/hcid -o CAP_NET_ADMIN -j GRANT
lidsconf -A POSTBOOT -s /usr/sbin/hcid -o /etc/bluetooth/lib -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/hciattach -o /dev/ttyS1 -j WRITE

# samba
lidsconf -A POSTBOOT -s /usr/local/samba/bin/smbd -o CAP_SYS_RESOURCE -j GRANT
/bin/touch /etc/samba/secrets.tdb
lidsconf -A POSTBOOT -s /usr/local/samba/bin/smbd -o /etc/samba/secrets.tdb -j WRITE
lidsconf -A POSTBOOT -s /usr/local/samba/bin/smbd -o /usr/local/samba/private -j WRITE

# sh-secure
# sh-secure is run in a sandbox, it is not affected by generic rules.
lidsconf -A POSTBOOT -o /sbin/sh-secure -j DENY
lidsconf -A POSTBOOT -s /sbin/busybox-secure -o /sbin/sh-secure -j READONLY
lidsconf -A POSTBOOT -s /sbin/sh-secure -o LIDS_SANDBOX -j ENABLE
for i in / /dev /dev/pts /proc /var /home /etc /mnt/documents /opt/Qtopia; do
    lidsconf -A POSTBOOT -s /sbin/sh-secure -o $i -i -1 -j WRITE
done
for i in CAP_CHOWN CAP_DAC_READ_SEARCH CAP_FOWNER CAP_FSETID CAP_KILL CAP_SETPCAP CAP_LINUX_IMMUTABLE CAP_NET_ADMIN CAP_NET_RAW CAP_IPC_LOCK CAP_IPC_OWNER CAP_SYS_MODULE CAP_SYS_RAWIO CAP_SYS_CHROOT CAP_SYS_PACCT CAP_SYS_ADMIN CAP_SYS_BOOT CAP_SYS_NICE CAP_SYS_RESOURCE CAP_SYS_TIME CAP_SYS_TTY_CONFIG CAP_MKNOD CAP_LEASE; do
    lidsconf -A POSTBOOT -s /sbin/sh-secure -o $i -i -1 -j GRANT
done

# sshd
lidsconf -A POSTBOOT -s /usr/sbin/dropbear -o /etc/dropbear -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/dropbear -o /sbin/sh-secure -j READONLY
lidsconf -A POSTBOOT -s /usr/sbin/dropbear -o /var/log/wtmp -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/dropbear -o /tmp -i 2 -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/dropbear -o /dev/random -j READONLY
lidsconf -A POSTBOOT -s /usr/sbin/dropbear -o /dev/urandom -j READONLY
lidsconf -A POSTBOOT -s /usr/sbin/dropbear -o /dev/ptmx -j WRITE

# atd
lidsconf -A POSTBOOT -s /usr/sbin/atd -o /proc/pcf/RTCSCA -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/atd -o /proc/pcf/RTCMNA -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/atd -o /proc/pcf/RTCHRA -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/atd -o /proc/pcf/RTCWDA -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/atd -o /proc/pcf/RTCDTA -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/atd -o /proc/pcf/RTCMTA -j WRITE
lidsconf -A POSTBOOT -s /usr/sbin/atd -o /proc/pcf/RTCYRA -j WRITE

# kill/killall
lidsconf -A POSTBOOT -s /bin/kill -o CAP_KILL -j GRANT
lidsconf -A POSTBOOT -s /usr/bin/killall -o CAP_KILL -j GRANT

# shutdown
lidsconf -A -o /sbin/shutdown -j READONLY
lidsconf -A -s /sbin/shutdown -o /sbin/poweroff -j READONLY
lidsconf -A -s /sbin/shutdown -o /sbin/reboot -j READONLY

# splash and addtext (startup splash screens and progress bar)
lidsconf -A -s /bin/splash -o /tmp -i 2 -j WRITE
lidsconf -A POSTBOOT -s /bin/splash -o /dev/fb -j WRITE
lidsconf -A POSTBOOT -s /bin/addtext -o /dev/fb -j WRITE

# rc.gadget
lidsconf -A POSTBOOT -o /etc/rc.d/rc.gadget -j READONLY
lidsconf -A POSTBOOT -s /etc/rc.d/rc.gadget -o /sbin/rmmod -j READONLY
lidsconf -A POSTBOOT -s /etc/rc.d/rc.gadget -o /sbin/insmod -j READONLY
lidsconf -A POSTBOOT -o /etc/gadget -j READONLY
lidsconf -A POSTBOOT -s /etc/rc.d/rc.gadget -o /etc/gadget -j WRITE

# rc.qtopia
lidsconf -A POSTBOOT -o /etc/rc.d/rc.qtopia -j READONLY
lidsconf -A POSTBOOT -s /etc/rc.d/rc.qtopia -o /tmp -i 1 -j WRITE
lidsconf -A POSTBOOT -s /etc/rc.d/rc.qtopia -o /sbin/busybox-secure -i 1 -j READONLY
lidsconf -A POSTBOOT -s /etc/rc.d/rc.qtopia -o CAP_KILL -i 1 -j GRANT

# updateqtopia and updateqtopiahelper
# FIXME remove updateqtopia
lidsconf -A POSTBOOT -o /opt/Qtopia -j READONLY
lidsconf -A POSTBOOT -o /bin/updateqtopia -j READONLY
lidsconf -A POSTBOOT -o /bin/updateqtopia -o /etc/lids -i 1 -j WRITE
lidsconf -A POSTBOOT -s /bin/updateqtopia -o /bin/umount -j READONLY
lidsconf -A POSTBOOT -s /bin/updateqtopia -o /bin/mount -j READONLY
lidsconf -A POSTBOOT -s /bin/updateqtopia -o /dev/tffsa2 -i 1 -j WRITE
lidsconf -A POSTBOOT -s /bin/updateqtopia -o CAP_SYS_RAWIO -i 1 -j GRANT
lidsconf -A POSTBOOT -o /bin/updateqtopiahelper -j READONLY
lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o /sbin/fsck -j READONLY
lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o /bin/umount -j READONLY
lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o /opt/Qtopia -i 1 -j READONLY
lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o /etc/ld.so.conf -j WRITE
lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o /tmp -i 1 -j WRITE
lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o /dev/tffsa2 -i 1 -j WRITE
lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o CAP_SYS_RAWIO -i 1 -j GRANT
#lidsconf -A POSTBOOT -s /bin/updateqtopiahelper -o CAP_KILL -i 1 -j GRANT

# udhcpc
lidsconf -A -o /sbin/udhcpc -j READONLY
lidsconf -A -s /sbin/udhcpc -o CAP_NET_RAW -j GRANT
lidsconf -A -s /sbin/udhcpc -o CAP_NET_BIND_SERVICE 68 -j GRANT
lidsconf -A -o /usr/share/udhcpc/default.script -j READONLY
lidsconf -A -s /usr/share/udhcpc/default.script -o /etc/resolvconf -j WRITE

# ldcofig
/sbin/ldconfig
lidsconf -A -o /sbin/ldconfig -j READONLY
lidsconf -A -s /sbin/ldconfig -o /etc/ld.so.conf -j WRITE
lidsconf -A -s /sbin/ldconfig -o /etc/ld.so.cache -j WRITE

# proc_keys test program - remove this on production device
lidsconf -A -o /usr/bin/proc_keys -j READONLY
lidsconf -A -s /usr/bin/proc_keys -o /proc/lids/keys -j READONLY
lidsconf -A -o /usr/bin/suid -j READONLY
lidsconf -A -s /usr/bin/suid -o /proc/lids -j READONLY
lidsconf -A -s /usr/bin/suid -o /proc/lids/keys -j READONLY
lidsconf -A -s /usr/bin/suid -o /proc/lids/suid -j WRITE
lidsconf -A -o /usr/bin/suid2 -j READONLY
lidsconf -A -s /usr/bin/suid2 -o /etc/sxetools/test_text -j READONLY

# tat
lidsconf -A -o /usr/bin/tat -j READONLY
lidsconf -A POSTBOOT -s /usr/bin/tat -o /dev/docparatable -j WRITE

# getkeycode
lidsconf -A -o /bin/getkeycode -j READONLY
lidsconf -A POSTBOOT -s /bin/getkeycode -o /dev/tty0 -j READONLY

# modem_keep_alive.sh
lidsconf -A -o /usr/bin/modem_keep_alive.sh -j READONLY
lidsconf -A POSTBOOT -s /usr/bin/modem_keep_alive.sh -o /dev/omega_bcm2121 -i 1 -j WRITE

# bootchart
lidsconf -A -o /sbin/bootchartd -j READONLY
lidsconf -A -s /sbin/bootchartd -o /bin/umount -j READONLY
lidsconf -A -s /sbin/bootchartd -o /bin/mount -j READONLY
lidsconf -A -s /sbin/bootchartd -o /var/log/bootchart.tgz -i 1 -j WRITE
lidsconf -A -s /sbin/bootchartd -o /var/log -i 1 -j WRITE

# pppd
lidsconf -A -o /usr/sbin/pppd -j DENY
lidsconf -A -s /usr/sbin/pppd -o /dev/ttyp0 -j WRITE
lidsconf -A -s /usr/sbin/pppd -o /dev/ppp -j WRITE
lidsconf -A -s /usr/sbin/pppd -o CAP_NET_ADMIN -j GRANT


# telnetd
#lidsconf -A -o /usr/sbin/telnetd -j READONLY 
#telnet links to busybox and should already be protected
lidsconf -A -s /usr/sbin/telnetd -o /dev/ptmx -j WRITE
