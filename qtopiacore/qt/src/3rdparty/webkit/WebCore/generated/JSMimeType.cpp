/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSMimeType.h"

#include <wtf/GetPtr.h>

#include "JSPlugin.h"
#include "MimeType.h"
#include "PlatformString.h"
#include "Plugin.h"

using namespace KJS;

namespace WebCore {

/* Hash table */

static const HashEntry JSMimeTypeTableEntries[] =
{
    { "suffixes", JSMimeType::SuffixesAttrNum, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "enabledPlugin", JSMimeType::EnabledPluginAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "type", JSMimeType::TypeAttrNum, DontDelete|ReadOnly, 0, &JSMimeTypeTableEntries[4] },
    { "description", JSMimeType::DescriptionAttrNum, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSMimeTypeTable = 
{
    2, 5, JSMimeTypeTableEntries, 4
};

/* Hash table for prototype */

static const HashEntry JSMimeTypePrototypeTableEntries[] =
{
    { 0, 0, 0, 0, 0 }
};

static const HashTable JSMimeTypePrototypeTable = 
{
    2, 1, JSMimeTypePrototypeTableEntries, 1
};

const ClassInfo JSMimeTypePrototype::info = { "MimeTypePrototype", 0, &JSMimeTypePrototypeTable, 0 };

JSObject* JSMimeTypePrototype::self(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSMimeTypePrototype>(exec, "[[JSMimeType.prototype]]");
}

const ClassInfo JSMimeType::info = { "MimeType", 0, &JSMimeTypeTable, 0 };

JSMimeType::JSMimeType(ExecState* exec, MimeType* impl)
    : m_impl(impl)
{
    setPrototype(JSMimeTypePrototype::self(exec));
}

JSMimeType::~JSMimeType()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());
}

bool JSMimeType::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSMimeType, KJS::DOMObject>(exec, &JSMimeTypeTable, this, propertyName, slot);
}

JSValue* JSMimeType::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case TypeAttrNum: {
        MimeType* imp = static_cast<MimeType*>(impl());

        return jsString(imp->type());
    }
    case SuffixesAttrNum: {
        MimeType* imp = static_cast<MimeType*>(impl());

        return jsString(imp->suffixes());
    }
    case DescriptionAttrNum: {
        MimeType* imp = static_cast<MimeType*>(impl());

        return jsString(imp->description());
    }
    case EnabledPluginAttrNum: {
        MimeType* imp = static_cast<MimeType*>(impl());

        return toJS(exec, WTF::getPtr(imp->enabledPlugin()));
    }
    }
    return 0;
}

KJS::JSValue* toJS(KJS::ExecState* exec, MimeType* obj)
{
    return KJS::cacheDOMObject<MimeType, JSMimeType>(exec, obj);
}
MimeType* toMimeType(KJS::JSValue* val)
{
    return val->isObject(&JSMimeType::info) ? static_cast<JSMimeType*>(val)->impl() : 0;
}

}
