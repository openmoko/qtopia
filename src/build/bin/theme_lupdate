#!/usr/bin/perl
use strict;
use warnings;

use File::Basename;
use lib ( dirname($0) );
use Qtopia::Paths;
use Qtopia::Vars;
use XML::Parser;

Qtopia::Paths::get_paths();

# Windows depot builds use the perl scripts directly rather than the compiled code
if ( $isWindows ) {
    check_script($0, "$depotpath/src/build/bin", $ARGV[0]);
}


use constant DEBUG => 1;

my $DQTDIR = shift(@ARGV);
my @LANGS = split(/\s+/,shift(@ARGV));

my $themecfg = shift(@ARGV) || usage();
my $themedir = dirname($themecfg);
my $themename;

#open/read theme configration
my @themePages = ();
open CONFIG, "$themecfg" or die "Can't read $themecfg";
my @contents = <CONFIG>;

for ( @contents ) {
    my ( $key, $value ) = ( /([^=]*?)\s*=\s*(.*)/ );
    next if !defined $key;
    if ( $key eq "Name[]" ) {
        $value =~ s/ //g;
        $themename = $value;
        next;
    }
    if ( $key ne "TitleConfig" && $key ne "HomeConfig"
            && $key ne "ContextConfig" && $key ne "CallScreenConfig"
            && $key ne "DialerConfig" && $key ne "SecondaryTitleConfig" 
            && $key ne "SecondaryHomeConfig" ) {
        next;
    }
        
    if ( $value =~ /^.*\.xml?/ ) {
        @themePages = (@themePages, $value);
    }
}

#parse all theme xml
my %trMapping = ();
my $index=0;
for my $page (@themePages) {
    $index=0;
    parseFile ("$themedir/$page");
}

#write content to cpp file
my $tmp = "tr$$.cpp";
open CPP, ">$tmp" or die "Can't write $tmp";
for my $entry ( keys %trMapping ) {
    my @myarray  = split /-/,$entry;
    print CPP "translate(\"$myarray[0]\",\"$trMapping{$entry}\", 0, QCoreApplication::UnicodeUTF8, 0);\n";
}
close CPP;

#run lupdate on cpp file
my $tsfile = "Theme-$themename";
for my $lang ( @LANGS ) {
    my $filename;
    $filename = $tsfile."-".$lang.".ts";
    my $cmd = "$DQTDIR/bin/lupdate $tmp -ts $filename";
    DEBUG and print "$cmd\n";
    system($cmd);
}
unlink $tmp;

my $pageName = undef;
sub parseFile
{
    (my $filename) = $_[0];
    $pageName = undef;
    DEBUG and print qq(Parsing $filename\n);
    my $parser = new XML::Parser(ErrorContext => 2);
    $parser->setHandlers( Start => \&start_handler,
                            Char => \&char_handler );
    $parser->parsefile($filename);                                
}

sub start_handler
{
    my $p = shift;
    my $element = shift;
    if ( $element eq "page" ) {
        while (@_) {
            my $att = shift;
            if ( $att eq "name" ) {
               $pageName = shift;
            }
        }
    }
}

sub char_handler
{
    my $p = shift;
    my $text = shift;

    if ( (length($text) > 0) && ($p->current_element eq "trtext") ) {
        $trMapping{"$pageName-$index"} = $text;
	$index++;
    }
}


sub usage
{
    print "\nUsage: theme_lupdate DQTDIR \"lang1 lang2 ... langn\" theme.conf\n";
    exit
}

