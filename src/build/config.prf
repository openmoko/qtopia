exists($$QPEDIR/src/build/trace_on):message(config.prf)
# Setup config

# Load the configure-generated file
exists($$QPEDIR/src/config.pri):include($$QPEDIR/src/config.pri)
else:error(Missing $$fixpath($$QPEDIR/src/config.pri). Please configure Qtopia.)
# Load a device-specific config file (if it exists)
!isEmpty(DEVICE_CONFIG_PATH):exists($$DEVICE_CONFIG_PATH/config.pri):include($$DEVICE_CONFIG_PATH/config.pri)

QTDIR=$$(QTDIR)
equals(QTDIR,$$QTEDIR):QT_DEPOT_PATH=$$QTE_DEPOT_PATH
else:QT_DEPOT_PATH=$$DQT_DEPOT_PATH

# qmake should load this automatically...
exists($$QTDIR/.qmake.cache):include($$QTDIR/.qmake.cache)
else:error(Missing $$fixpath($$QTDIR/.qmake.cache). Please configure Qt.)

# Extract the QT_CONFIG variables into QTE_CONFIG and DQT_CONFIG
# Global scope protected by a function call
defineTest(readqtconfig) {
    QT_CONFIG=
    exists($$DQTDIR/mkspecs/qconfig.pri):include($$DQTDIR/mkspecs/qconfig.pri)
    DQT_CONFIG=$$QT_CONFIG
    export(DQT_CONFIG)

    QT_CONFIG=
    exists($$QTEDIR/mkspecs/qconfig.pri):include($$QTEDIR/mkspecs/qconfig.pri)
    QTE_CONFIG=$$QT_CONFIG
    export(QTE_CONFIG)
}

readqtconfig()

# We need this later to help ensure the correct Qt libs are used
CONFIG(debug,debug|release):QT_DEBUG_LIBS=1
else:QT_DEBUG_LIBS=0

# Assume we're using Qt (unless the project says otherwise)
CONFIG*=qt
# Basic Qt modules
QT=core gui network xml sql
equals(DQT_MINOR_VERSION,2):QT+=svg
# FIXME compat code should be removed
DEFINES+=QPE_NO_COMPAT

# Deal with qmake behaviors
contains(QMAKE_BEHAVIORS,keep_quotes) {
    LITERAL_QUOTE="
    LITERAL_ESCAPED_QUOTE=\"
    LITERAL_SQUOTE='
    LITERAL_BACKSLASH=\\

} else {
    LITERAL_QUOTE=\"
    LITERAL_ESCAPED_QUOTE=\\\"
    LITERAL_SQUOTE=\'
    LITERAL_BACKSLASH=\\\

}

# Platform/make stuff
win32 {
    COMMAND_HEADER=@
    COMMAND_SEP=&&
    PATH_SEP=:
    MAKE=$$fixpath($$QPEDIR/bin/winmake)
    DUMMY_COMMAND=echo >nul
    PRINTDOT=@$$fixpath($$QPEDIR/bin/printdot) >&2
    ENV=$$fixpath($$QPEDIR/bin/runwithvars)
} else {
    COMMAND_HEADER=@[ -z $$LITERAL_QUOTE\$$VERBOSE_SHELL$$LITERAL_QUOTE ] || set -x;
    COMMAND_SEP=;
    PATH_SEP=;
    MAKE=$(MAKE)
    DUMMY_COMMAND=true
    PRINTDOT=@echo -n . >&2
    ENV=env
}
LINE_SEP=$$esc(\n\t)$$COMMAND_HEADER
LINE_SEP_VERBOSE=$$esc(\n\t)

# Static config
CONFIG+=warn_on
TRANSLATIONS=$$LANGUAGES
TRANSLATIONS-=en
TRANSLATIONS-=en_US
MOC_DIR=.moc/$$RELEASE_BIN_TYPE
OBJECTS_DIR=.obj/$$RELEASE_BIN_TYPE
UI_HEADERS_DIR=.ui/$$RELEASE_BIN_TYPE
CONFIG-=depend_prl
CONFIG+=link_prl create_prl no_install_prl no_mocdepend
INCLUDEPATH+=$$QPEDIR/include $$QPEDIR/include/classic
LIBS=-L$$QPEDIR/lib $$LIBS
CONFIG+=common depends installs
!isEmpty(TRANSLATIONS):CONFIG+=i18n
TARGET=$$tail($$OUT_PWD)
DEFINES+=BUILDER=$$LITERAL_ESCAPED_QUOTE$$BUILDER$$LITERAL_ESCAPED_QUOTE

# The location of packages
depotProject:PKG_PATH=$$QPEDIR/pkg
else:PKG_PATH=$$PROJECT_ROOT/pkg

self=$$tail($$OUT_PWD).pro

# Enable the "edition" config (phone/pda/platform)
CONFIG+=$$QTOPIA_EDITION
# FIXME hack
platform:CONFIG+=phone

equals(LAUNCH_METHOD,normal):CONFIG+=no_singleexec

# Use Qtopia's projects.pri if projects.pri is not in your project root
exists($$PROJECT_ROOT/projects.pri):include($$PROJECT_ROOT/projects.pri)
else:include($$QTOPIA_PROJECT_ROOT/projects.pri)

# Setup the QTOPIA_ID of this project
QTOPIA_ID=$$fixpath($$OUT_PWD)
P_ROOT=$$PROJECT_ROOT
P_ROOT~=s,$$QTOPIA_DEPOT_PATH,$$QPEDIR,q
QTOPIA_ID~=s,$$fixpath($$P_ROOT/),,q

containsre($$QTOPIA_ID,^3rdparty) {
    # Disable warnings for third-party code.
    CONFIG+=warn_off
} else {
    # If enabled, make warnings into errors. This helps us pick up
    # warnings, useful due to our "no warnings in our code" policy.
    enable_werror {
        QMAKE_CFLAGS+=-Werror
        QMAKE_CXXFLAGS+=-Werror
    }
    # If enabled, warn about overloaded virtual functions.
    # This will help us to track down certain bugs more easily.
    enable_woverloaded_virtual {
        QMAKE_CXXFLAGS+=-Woverloaded-virtual
    }
}

# Make sure the current root is searched first
PROJECT_ROOTS-=$$P_ROOT
# Depot projects need to be converted
depotProject:PROJECT_ROOTS=$$P_ROOT $$PROJECT_ROOTS

# From now on, it's all relative to the source tree, not the build tree
TMP_PROJECT_ROOTS=$$PROJECT_ROOTS
PROJECT_ROOTS=
for(it,TMP_PROJECT_ROOTS) {
    it~=s,$$QPEDIR,$$QTOPIA_DEPOT_PATH,q
    PROJECT_ROOTS+=$$it
}

# Non-depot projects don't need to be converted
!depotProject:PROJECT_ROOTS=$$PROJECT_ROOT $$PROJECT_ROOTS

# Setup the global project keywords
load(keywords)
