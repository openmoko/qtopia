exists($$QPEDIR/src/build/trace_on):message(common.prf)
# Common stuff that's loaded for all projects

# Default destinations
depotProject:!no_dest:isEmpty(DESTDIR) {
    desktop:app:DESTDIR=$$QPEDIR/bin
    lib {
        contains(PROJECT_TYPE,desktop):DESTDIR=$$QPEDIR/lib/host
        else:DESTDIR=$$QPEDIR/lib
    }
}

# Windows lib stuff
lib:win32:!static:CONFIG+=dll

# Depend on all the stuff in the include path
DEPENDPATH+=$$INCLUDEPATH

# Fairly useless define
DEFINES+=QTOPIA_TARGET=$$LITERAL_ESCAPED_QUOTE$$ORIG_TARGET$$LITERAL_ESCAPED_QUOTE

# This macro used to be defined by Qt in debug mode
qt:CONFIG(debug,debug|release):DEFINES+=DEBUG

# This library must be loaded for Qt apps and libs on Mac OS
qt:mac:!no_carbon {
    app|lib:LIBS+=-framework Carbon
    QMAKE_INCREMENTAL=1
}

# Hide symbols
qtopia_visibility:contains(QT_CONFIG,reduce_exports) {
   CONFIG+=hide_symbols
}

# Force all this to use $$QTDIR so it can change between Qt versions
QMAKE_MOC       = $$QTDIR/bin/moc
QMAKE_UIC       = $$QTDIR/bin/uic
QMAKE_UIC3      = $$QTDIR/bin/uic3
QMAKE_RCC       = $$QTDIR/bin/rcc
QMAKE_INCDIR_QT = $$QTDIR/include
QMAKE_LIBDIR_QT = $$QTDIR/lib

# By popular demand this now works everywhere
win32:RMRF=rmdir /s /q
else:RMRF=rm -rf
cleaninstall.commands=$$COMMAND_HEADER
PREFIXES=$(IMAGE) $(DIMAGE)
for(prefix,PREFIXES) {
    win32:cleaninstall.commands+=if exist $$prefix
    cleaninstall.commands+=$$RMRF $$prefix $$LINE_SEP
}
cleaninstall.commands+=$$MAKE install
QMAKE_EXTRA_TARGETS+=cleaninstall
cinstall.commands=
cinstall.depends=cleaninstall
QMAKE_EXTRA_TARGETS+=cinstall

# Test integration
depotProject:part_of_qtopia {
    exists($$QPEDIR/tests/src/$$QTOPIA_ID) {
        test.commands=$$MAKE -C $$QPEDIR/tests/src/$$QTOPIA_ID test
    } else {
        test.commands=$$COMMAND_HEADER\
            echo No tests exist for $${QTOPIA_ID}. $$LINE_SEP\
            echo Please add some tests to $$QTOPIA_DEPOT_PATH/tests/src/$$QTOPIA_ID
    }
}
QMAKE_EXTRA_TARGETS*=test

!subdirs {
    # checkp4 helps us to find not-checked-in files
    ALL_SRC_FILES=$$FORMS $$HEADERS $$SOURCES
    !isEmpty(ALL_SRC_FILES) {
        runcheckp4.CONFIG=no_link no_dependencies no_build combine ignore_no_exist no_clean
        runcheckp4.commands=$$COMMAND_HEADER\
            $$fixpath($$QTOPIA_DEPOT_PATH/scripts/checkp4) $$PROJECT_ROOT/$$QTOPIA_ID/$$self ${QMAKE_FILE_IN}
        runcheckp4.input=ALL_SRC_FILES
        runcheckp4.output=dummy_checkp4
        runcheckp4.name=checkp4
        QMAKE_EXTRA_COMPILERS+=runcheckp4
        checkp4.depends=compiler_runcheckp4_make_all
    }
    QMAKE_EXTRA_TARGETS+=checkp4

    # remove_target removes the TARGET file
    win32|app:tg=$(TARGET)
    else:tg=$(DESTDIR)$(TARGET)
    remove_target.commands=-$(DEL_FILE) $$tg
    QMAKE_EXTRA_TARGETS+=remove_target

    QMAKE_EXTRA_TARGETS*=printdependrules qmake_check

    # Don't let this fail
    !contains(INSTALLS,target):QMAKE_EXTRA_TARGETS+=install_target

    # Desktop apps (not Qtopia Desktop) get an RPATH to the host Qt lib directory
    # so they can run without LD_LIBRARY_PATH.
    desktop:app:!qtopiadesktop:!isEmpty(QTOPIA_RPATH) {
        LIBS+=$${QTOPIA_RPATH}$$fixpath($$DQTDIR/lib)
        LIBS+=$${QTOPIA_RPATH}$$fixpath($$QTOPIA_SDKROOT/lib/host)
    }

    QMAKE_EXTRA_TARGETS*=regenerate regenerate_all

    # make first_syncqtopia just runs make syncqtopia but it prints out dots in subdirs (used by configure)
    first_syncqtopia.depends=syncqtopia

    # Add the implicit RPATH to embedded targets
    contains(PROJECT_TYPE,embedded)|qtopia {
        qt:!isEmpty(EMBEDDED_RPATH):LIBS+=$$EMBEDDED_RPATH
    }
}

# relink does a remove_target and then a make (so that everything is relinked)
relink.commands=$$COMMAND_HEADER\
    $$MAKE
relink.depends=remove_target
QMAKE_EXTRA_TARGETS+=relink

stub:QMAKE_EXTRA_TARGETS+=mocables

# On windows, stop all the deprecation warnings
win:DEFINES+=_CRT_SECURE_NO_DEPRECATE

