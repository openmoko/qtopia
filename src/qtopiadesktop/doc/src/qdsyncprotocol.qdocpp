/*!

\group qdsync_commands
\title qdsync Protocol
\ingroup overviews
\brief A description of the protocol used between Qtopia Sync Agent and the Synchronization application.

\section1 Overview

This page describes how the qdsync protocol works. Individual commands are documented below.

The qdsync protocol is a line-oriented protocol that can be implemented on top of a socket.
It consists of a number of required commands and some optional commands.

\section1 State Machine

While there is no formal state machine there is an expected order of message arrival.
The basic process looks like this.

\image qdsyncprotocol.png qdsync protocol diagram

\list
\o When a connection is initiated the device will send a \l 220 message.
\o The desktop sends a \l USER message.
\o The device responds with a \l 331 message.
\o The desktop sends a \l PASS message.
\o The device responds with a \l 230 message.
\o The desktop and device can now send \l CALL or \l CALLB messages.
\o The device responds to these with \l 200 messages (unless disabled with \l HELPER_INIT).
\o The connection is ended when the desktop sends a \l QUIT message.
\endlist

Additionally, once the desktop has sent the \l HELPER_INIT message the device expects to receive a message
of some kind within the specified duration period. The \l HELPER_PING and \l HELPER_ACK commands exist for
this purpose. The \l HELPER_QUIT command is used by the device to indicate failure to send a command in the
specified time.

\section1 Commands

\generatelist related

\sa Overviews

*/

/*!

\page qdsync_220_1.html
\title 220
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 220 Qtopia 4.3.0;key=value;key=value

\section1 Usage
This command contains 2 arguments. The first argument is \c Qtopia. The second argument contains a
list of key/value pairs separated by \c ; and preceded by the version number.

\code
220 Qtopia 4.3.0;challenge={96020319-e076-954f-bf78-25b615c682c5};loginname=root;displayname=Device owner;protocol=2;system=Qtopia;model=Greenphone;hexversion=0x040300
\endcode

\section1 Description
This command is sent from the device to the desktop when the connection is detected.
For some connection types this will only be after the \l HELPER_INIT command is received.

Qtopia Sync Agent expects the following key/value pairs to be sent:

\list
\o challenge \list foo A value that is unique to each device. \endlist
\o loginname \list foo The name that should be passed with the \l USER command. \endlist
\o displayname \list foo This is the owner name, as reported by Qtopia::ownerName(). It may be displayed to the user. \endlist
\o protocol \list foo This must be set to 2. \endlist
\o system \list foo This is a string describing the system installed on the device. \endlist
\o model \list foo This is a string describing the device that may be displayed to the user. \endlist
\o hexversion \list foo This is the version number as a hexadecimal number. It should be comparable to the QTOPIA_VERSION macro. \endlist
\endlist

Additionally, the \c qtopia4 plugin expects to see:

\list
\o datasets \list foo A list of datasets the device supports (proxy QDClientSyncPlugin instances will be created for them). \endlist
\endlist

After this command is sent the device expects to receive a \l USER command.

\sa USER

*/

/*!

\page qdsync_USER_1.html
\title USER
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief USER username

\section1 Usage
This command has a single argument that is a string.

\code
USER username
\endcode

\section1 Description
Sent from the desktop to the device. The username must match the \c loginname value passed to the
desktop in the \l 220 command.

The device will respond with a \l 331 or a \l 530 command.

*/

/*!

\page qdsync_530_1.html
\title 530
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 530 Please login with USER and PASS

\section1 Usage
This command includes an untranslated error message that can be ignored.

\code
530 Please login with USER and PASS
\endcode

\section1 Description
Sent from the device to the desktop if an unexpected command is received before handshaking is complete
or if the username/password is incorrect.

*/

/*!

\page qdsync_331_1.html
\title 331
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 331 User name ok, need password

\section1 Usage
This command includes an untranslated status message that can be ignored.

\code
331 User name ok, need password
\endcode

\section1 Description
Sent from the device to the desktop in response to a \l USER command.

After this command is sent the device will expect to receive a \l PASS command.

*/

/*!

\page qdsync_PASS_1.html
\title PASS
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief PASS password

\section1 Usage
\code
PASS password
\endcode

\section1 Description
Sent from the desktop to the device.
The password should associated with the \c challenge value sent to the desktop in the \l 220 command.

The device will respond with a \l 230 or a \l 530 command.

*/

/*!

\page qdsync_230_1.html
\title 230
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 230 User logged in, proceed

\section1 Usage
\code
230 User logged in, proceed
\endcode

\section1 Description
Sent from the device to the desktop in response to a \l PASS command. This command
indicates that the handshaking is done.

*/

/*!

\page qdsync_CALL_1.html
\title CALL
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief CALL QPE/System execute(QString) addressbook

\section1 Usage
\code
CALL QPE/System execute(QString) addressbook
\endcode

\section1 Description
Sent from either the device or desktop. This command causes a QCop message to be delivered.

This command can only support the following types:
\list
\o QString (non-ASCII text may not be transferred correctly)
\o int
\o bool (0 or 1)
\endlist

This command exists for legacy reasons and should be avoided. Please see the
\l CALLB documentation for information about sending QCop messages.

*/

/*!

\page qdsync_CALLB_1.html
\title CALLB
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief CALLB QPE/System execute(QString) BASE64DATA

\section1 Usage
\code
CALLB QPE/System execute(QString) BASE64DATA
\endcode

\section1 Description
Sent from either the device or desktop. This command causes a QCop message to be delivered.
Unlike the \l CALL command, this command can work with any value that can be sent in a QCop message.
The data bytes should be generated like this.
\code
QByteArray data;
{
    QDataStream stream( &data, QIODevice::WriteOnly );
    stream << QString("addressbook");
}
QByteArray args = data.toBase64();
\endcode

The device will respond with a \l 200 or a \l 500 command.

Note that the QCop message will be delivered locally if a local client has
registered the channel. If a local client has not registered the channel and a
remote client has registered the channel (or the message is sent to QPE/Application/*)
the QCop message will be delivered via the usual inter-process mechanism. This
means that the messages are subject to security restrictions and attempts to send
QCop messages to disallowed channels will result in the Synchronization application
being terminated. To allow a particular message to be sent you should mofify the
\c qdsync SXE profile.

*/

/*!

\page qdsync_500_1.html
\title 500
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 500 Syntax error, command unrecognized

\section1 Usage
This command includes an untranslated error message that can be ignored.

\code
500 Syntax error, command unrecognized
\endcode

\section1 Description
Sent from either the device or desktop. This is sent in response to a \l CALL command with an invalid type
or to a \l CALL or \l CALLB command with less than 2 arguments.

*/

/*!

\page qdsync_599_1.html
\title 599
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 599 ChannelNotRegistered QPE/Channel

\section1 Usage
This command includes an untranslated error message that can be ignored.

\code
599 ChannelNotRegistered QPE/Channel
599 send failed
\endcode

\section1 Description
Sent from either the device or desktop. This is sent in response to a \l CALL or \l CALLB command when
the destination channel does not exist or the QCopChannel::send() function returns false.
As a special case, messages sent to \c QPE/Application/* are always delivered because the application may not
be running when the command is sent.

*/

/*!

\page qdsync_502_1.html
\title 502
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 502 Command not implemented

\section1 Usage
This command includes an untranslated error message that can be ignored.

\code
502 Command not implemented
\endcode

\section1 Description
Sent from the device to the desktop. This is sent in response to a command that is not handled.

*/

/*!

\page qdsync_200_1.html
\title 200
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 200 Command okay

\section1 Usage
This command includes an untranslated status message that can be ignored.

\code
200 Command okay
\endcode

\section1 Description
Sent from the device to the desktop. This is sent in response to a successfully handled \l CALL or \l CALLB command.

Note that sending of this command can be suppressed with an argument to the \l HELPER_INIT command.

Note that the desktop does not send these commands to the device.

*/

/*!

\page qdsync_QUIT_1.html
\title QUIT
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief QUIT

\section1 Usage
\code
QUIT
\endcode

\section1 Description
Sent from the desktop to the device. This command instructs the device to close the connection.
The device responds with a \l 211 command.

*/

/*!

\page qdsync_211_1.html
\title 211
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief 211 Have a nice day!

\section1 Usage
This command includes an untranslated status message that can be ignored.

\code
211 Have a nice day!
\endcode

\section1 Description
Sent from the device to the desktop. This is sent in response to a \l QUIT command just before
the connection is closed.

*/

/*!

\page qdsync_HELPER_INIT_1.html
\title HELPER_INIT
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief HELPER_INIT 5000 1 1

\section1 Usage
This command has three arguments. The first is the timeout time in milliseconds. The second parameter is optional
(defaults to 0) and is a boolean (0/1) that enables the \l HELPER_ACK command. The third parameter is optional
(defaults to 1) and is a boolean (0/1) that enables the \l 200 command.

\code
HELPER_INIT 5000 1 1
\endcode

\section1 Description
Sent from the desktop to the device. This enables the connection-independant timeout that is required
for some connection types. It also enables the \l HELPER_ACK command that is required for some connection types.

If the timeout value is 0 then the timeout is disabled (useful if you need the ack but not the timeout). The
\l HELPER_PING command can be sent if there is no actual data to send (ie. it is not interpreted by the other
end of the connection).


Note: This command is removed from the command stream by the connection helper.

*/

/*!

\page qdsync_HELPER_PING_1.html
\title HELPER_PING
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief HELPER_PING

\section1 Usage
\code
HELPER_PING
\endcode

\section1 Description
Sent from the desktop to the device. This prevents the device to disconnect (if the \l HELPER_INIT)
command has been sent.

Note: This command is removed from the command stream by the connection helper.

*/

/*!

\page qdsync_HELPER_ACK_1.html
\title HELPER_ACK
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief HELPER_ACK

\section1 Usage
\code
HELPER_ACK
\endcode

\section1 Description
Sent from the device to the desktop in response to any command (if the \l HELPER_INIT command enabled it).
This is required by some connection types (which block unless input is available).

Note: This command is removed from the command stream by the connection helper.

*/

/*!

\page qdsync_HELPER_QUIT_1.html
\title HELPER_QUIT
\ingroup qdsync_commands
\sa {qdsync Protocol}
\brief HELPER_QUIT

\section1 Usage
\code
HELPER_QUIT
\endcode

\section1 Description
Sent from the device to the desktop. This command is sent just before the device closes the connection.
Under normal conditions the desktop should not receive this message (because the connection should be down).
If the desktop receives this command it immediatley closes the connection.

Note: This command is removed from the command stream by the connection helper.

*/
