Index: btsco.c
===================================================================
RCS file: /cvsroot/bluetooth-alsa/btsco/kernel/btsco.c,v
retrieving revision 1.12
diff -u -5 -r1.12 btsco.c
--- btsco.c	13 Apr 2006 19:50:23 -0000	1.12
+++ btsco.c	24 Oct 2006 05:51:38 -0000
@@ -91,13 +91,19 @@
 MODULE_SUPPORTED_DEVICE("{{ALSA,Bluetooth SCO Soundcard}}");
 
 static char *mod_revision = "$Revision: 1.15 $";
 
 static int index[SNDRV_CARDS] = {[0 ... (SNDRV_CARDS - 1)] = -2}; /* Exclude the first card */
+static char *id[SNDRV_CARDS] = SNDRV_DEFAULT_STR;
+static int enable[SNDRV_CARDS] = SNDRV_DEFAULT_ENABLE;
 
 module_param_array(index, int, NULL, 0444);
 MODULE_PARM_DESC(index, "Index value for Bluetooth SCO Headset Soundcard.");
+module_param_array(id, charp, NULL, 0444);
+MODULE_PARM_DESC(index, "Name value for Bluetooth SCO Headset Soundcard.");
+module_param_array(enable, bool, NULL, 0444);
+MODULE_PARM_DESC(index, "Enable value for Bluetooth SCO Headset Soundcard.");
 
 #undef dprintk
 #if 1
 #define dprintk(fmt...) printk(KERN_INFO "snd-bt-sco: " fmt)
 #else
@@ -1101,12 +1107,12 @@
 
 		/* Expect this to be 3 because we (this thead) have a copy,
 		   the driver process keeps one, and the app has the socket open.
 		 */
 		if (file_count(sock->file) != 3) {
-			dprintk("file_count is %d (expected 3)\n",
-				file_count(sock->file));
+			/*dprintk("file_count is %d (expected 3)\n",
+				file_count(sock->file)); */
 		}
 		fput(sock->file);
 
 		schedule();
 	} while (!bt_sco->thread_exit);
@@ -1142,12 +1148,19 @@
 	snd_card_t *card;
 	snd_card_bt_sco_t *bt_sco;
 	int err;
 	snd_hwdep_t *hw;
 
+	if (dev >= SNDRV_CARDS)
+		return -ENODEV;
+	if (!enable[dev]) {
+		dev++;
+		return -ENOENT;
+	}
+
 	card =
-	    snd_card_new(index[dev], SNDRV_DEFAULT_STR1,
+	    snd_card_new(index[dev], id[dev],
 			 THIS_MODULE, 0);
 	if (card == NULL)
 		return -ENOMEM;
 
 	bt_sco = kmalloc(sizeof(*bt_sco), GFP_KERNEL);
@@ -1211,19 +1224,30 @@
 	return err;
 }
 
 static int __init alsa_card_bt_sco_init(void)
 {
+	int i;
+	int found = 0;
+
 	printk(KERN_INFO "snd-bt-sco revision %s\n", mod_revision + 11);
 
-	if (snd_card_bt_sco_probe(0) < 0) {
+	for (i = 0; i < SNDRV_CARDS; i++) {
+		if (snd_card_bt_sco_probe(i) >= 0) {
+			found = 1;
+		}
+		else {
 #ifdef MODULE
-		printk(KERN_ERR
-		       "Bluetooth SCO soundcard not found or device busy\n");
+			printk(KERN_ERR
+		       		"Bluetooth SCO soundcard not found or device busy\n");
 #endif
-		return -ENODEV;
+		}
 	}
+
+	if (!found)
+		return -ENODEV;
+
 	return 0;
 }
 
 static void __exit alsa_card_bt_sco_exit(void)
 {
