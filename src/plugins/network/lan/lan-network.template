#!/bin/sh

# The dialup plugin uses the 'lan-network' script in order to access/install
# system dependent options. System integrators must provide such a script 
# in order to get the dialup plugin working.
#
# This script is a template of 'lan-network'. Complete this script where 
# ##ADD CODE HERE## appears.
#
# The completed script has to be renamed to lan-network and must be copied into
# $QPEDIR/src/plugins/network/lan. The build system automatically installs lan-network
# into the image directory.
#
# For further details how this script is used 
# see $QPEDIR/src/plugins/network/lan/lan.cpp.


###############################
DEBUG=1
LOG=0
LOG_FILE="/tmp/qtopia-network.log"
TMP_FILE="/tmp/lan-intern-network.temp";
###############################


print_debug()
{
    if [ $DEBUG -eq 1 ]; then
        echo "LAN: $1";
    fi
    if [ $LOG -eq 1 ]; then
        echo "LAN: $1" >> $LOG_FILE;
    fi
}

print_options()
{
    echo ;
    echo "Qtopia network interface";
    echo "Usage: lan-network (install|cleanup|start|stop|route)";
    echo "";
    echo "install   <iface name>    dns [DNS1 DNS2] -> sets new dns server";
    echo "                          dhcp -> obtain interface details via DHCP";
    echo "                          static <IP> <subnet> <broadcast> <gateway> -> install interface and use given details";
    echo "                          wireless -essid <ESSID> -mode <Master|Managed|Ad-Hoc>"
    echo "                                   -ap <AP> -bitrate <BITRATE> -nick <NICKNAME>"
    echo "                                   -channel <CHANNEL> -keylength <128|64> -authmode <mode>";
    echo "start     <iface name> -> starts interface";
    echo "stop      <iface name> -> stops interface ";
    echo "cleanup   deletes remaining configuration files";
    echo "route     <iface name> [-gw <gateway IP>] -> the given interface becomes the default gateway for IP traffic (don't pass gateway IP if DHCP used)";
        
    exit 1;
}


# install network configuration and dns server
# parameter: 
#   $1 =>  <iface name e.g. eth1> 
#           $2  => dns  [$3 => dns1 $4 => dns2] ( if no dns IP passed use dhcp to find dns server)
#               => dhcp  (we decided to use DHCP -> no futher options required) 
#               => static  $3 => IP $4 => subnet mask $5 => broadcast addr $6 => Gateway IP
#               => wireless 
#                   the following options can follow the wireless keyword:
#                       [-essid <ESSID>] [-mode <Master|Managed|Ad-Hoc>]
#                       [-ap <AP>] [-bitrate <value>] [-nick <nickname>] [-channel <CHANNEL>]
#                       [-keylength <128|64> ]
#                        
#                       * [-authmode <open|shared> -multikey <defaultKey> <key1> <key2> <key3> <key4>] 
#                       * [-authmode <open|shared> -phrase <passphrase> ]   
#                       * [-authmode <none> -nokey ]  
#                       * [-authmode <WPA-PSK> <password> <TKIP|AES> ]
#                       * [-authmode <WPA-EAP> <TLS> <identity> <client-key-password> <clientKey> <clientCert> <serverCert>
#                       * [-authmode <WPA-EAP> <TTLS|PEAP> <identity> <password> <serverCert> <MD5|GTC|MSCHAPV2|Any> <anonymous identity>
 
install()
{
    # Replace following code if necessary for your system
    
    #dns and confic options
    IFACE=$1;
    shift;
    MODE=$1;
    shift

    case $MODE in 
        dns) 
            print_debug "Installing dns server";
            
            if [ $# -eq 2 ]; then # if no ip passed assume dhcp
               echo "Using given dns server: $1 , $2 ";
                ## ADD CODE HERE ##
            else
               echo "Asking DHCP server for dns details";
                ## ADD CODE HERE ##
            fi
            #sudo mv -f $TMP_FILE /etc/resolv.conf;
            ;; 
        dhcp)
            print_debug "Using DHCP to obtain IP, gateway, broadcast and netmask address";
            ## ADD CODE HERE ##
            ;;
        static)
            print_debug "Using given IP, gateway, broadcast and netmask address";
            ## ADD CODE HERE ##
            ;;
        wireless)
            # no implementation required if wireless lan not used
            while [ $# -gt 0 ]; do
                case "$1" in 
                    -mode)
                        shift;
                        ## ADD CODE HERE ##
                        ;;
                    -essid)
                        shift;
                        ## ADD CODE HERE ##
                        ;;
                    -ap)
                        ## ADD CODE HERE ##
                        shift;
                        echo "WIRELESS_AP=$1" >> $TMP_FILE;
                        ;;
                    -bitrate)
                        shift;
                        if [ "$1" = "0" ]; then
                            ## ADD CODE HERE ##
                            echo "auto detect bitrate"
                        else
                            ## ADD CODE HERE ##
                            echo "use given bitrate";
                        fi  
                        ;;
                    -nick)
                        shift;
                        ## ADD CODE HERE ##
                        ;;
                    -channel)
                        shift;
                        if [ "$1" = "0" ]; then
                            ## ADD CODE HERE ##
                            echo "auto detect channel";
                        else
                            ## ADD CODE HERE ##
                            echo "use given channel";
                        fi
                        ;;
                    -keylength)
                        shift;
                        ## ADD CODE HERE ##
                        ;;
                    -authmode)
                        ## ADD CODE HERE ##
                        shift;
                        local mode="";
                        case "$1" in 
                            open|shared|none)
                                ## ADD CODE HERE ##
                                # handle open/shared/none encryptipon
                                shift;
                                if [ "$1" = "-phrase" ]; then
                                    shift;
                                    ## ADD CODE HERE ##
                                    echo "use passphrase";
                                elif [ "$1" = "-nokey" ]; then
                                    shift;
                                    ## ADD CODE HERE ##
                                    print_debug "no password/keys given";
                                elif [ "$1" = "-multikey" ]; then
                                    shift;
                                    echo "using default key: $1" # can be 0-3
                                    ## ADD CODE HERE ##
                                    shift;
                                    ## ADD CODE HERE ##
                                    # read all 4 keys and determine which is default
                                fi
                                ;;
                            WPA_PSK)
                                shift;
                                ## ADD CODE HERE ##
                                ;;
                            WPA_EAP)
                                shift;
                                ## ADD CODE HERE ##
                                ;;
                        esac
                        ;;
                    *)  
                        print_debug "Unknown option $1";
                        shift
                        ;;
                   
                esac;
                shift;
            done
            ;;
        *)
            print_debug "Unknown option: $MODE";
            print_options;
            exit 1;
            ;;
    esac
}

# Starts the interface
# parameter:
#   $1 => interface name, e.g. eth1
start()
{
    print_debug "starting interface $1";
    ## ADD CODE HERE ##
    #sudo /sbin/ifup $1;
}

# Stops the interface
# parameter:
#   $1 => interface name, e.g. eth1
stop()
{
    print_debug "stopping interface $1";
    ## ADD CODE HERE ##
    #sudo /sbin/ifdown $1
}

# Cleans any existing configuration file. This is called when the user deletes the interface
cleanup()
{
    print_debug "cleaning interface configuration";
    ## ADD CODE HERE ##
    # anything to do?
}

# Changes the routing information so that the given interface becomes the standard gateway.
# This is only called when the interface is running already. If no gateway option is passed
# dhcp lookup is expected
# parameter:
#    route [-gw <gateway IP>]
route()
{
    # Replace following code if necessary for your system
    
    print_debug "changing default route"
    
    if [ $# -gt 2 ]; then
        ## ADD CODE HERE ##
        # gateway address was passed to us
        gateway=$3
    else
        echo "Using DHCP information to find gateway IP";
        ## ADD CODE HERE ##
    fi

    if [ -n "$gateway" ]; then
        print_debug "removing old default route";
        sudo route del default;
        print_debug "adding new default route via $1";
        sudo /sbin/route add default gw $gateway;
    fi
}

#######################################
#Parse command line

print_debug "Starting config script for lan plugin";

ACTION=$1;
shift;
case $ACTION in
    start)
        start "$@"
        ;;
    stop)
        stop "$@" 
        ;;
    install)
        install "$@";
        ;;
    cleanup)
        cleanup "$@";
        ;;
    route)
        route "$@";
        ;;
    *)
        print_options;
        exit 1;
        ;;
esac
