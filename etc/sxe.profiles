[allow]
RegionName
SetProperty
AddProperty
Region
RegionMove
RepaintRegion
Identify
RequestFocus
QCopSend/QCop/QPE/QtopiaApplication/available(QString,int)
QCopSend/QCop/QPE/System/notBusy(QString)
QCopSend/QCop/QPE/System/closing(QString)
QCopSend/QCop//detach()
ValueSpace/Sync
#
[alarm]
QCopSend/QCop/QPE/AlarmServer/deleteAlarm(QDateTime,QString,QString,int)
QCopSend/QCop/QPE/AlarmServer/addAlarm(QDateTime,QString,QString,int)
QCopSend/QCop/QPE/AlarmServer/dailyAlarmEnabled(bool)
QCopSend/QCop/QPE/Application/qpe/Alert::soundAlarm()
QCopSend/QCop/QPE/Application/qpe/Alert::soundAlert()
#
[base]
QCopRegisterChannel/QCop/RegisterChannel/QPE*
QCopSend/QCop/QPE*
#
[beaming]
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamBusinessCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamCalendar(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamFile(QString,QString,bool)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamFile(QContentId)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamPersonalBusinessCard()
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamBusinessCard(QContact)

#
[bluetooth]
QCopRegisterChannel/QCop/RegisterChannel/QPE/Application/btsettings
QCopSend/QCop/QPE/DocAPI/registerCLS(QString,QStringList,int)
QCopSend/QCop/QPE/DocAPI/unregisterCLS(QString,int)
QCopSend/QCop/QPE/BluetoothServiceListeners/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/BluetoothServiceListeners
QCopRegisterChannel/QCop/RegisterChannel/QPE/BluetoothHandsfree
QCopSend/QCop/QPE/BluetoothHandsfree/*
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushBusinessCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushPersonalBusinessCard()
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushPersonalBusinessCard(QBluetoothAddress)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushBusinessCard(QContact)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushCalendar(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushFile(QString,QString,bool)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushFile(QContentId)

#
[cardreader]
QCopRegisterChannel/QCop/RegisterChannel/QPE/Card
#
[camera]
QCopSend/QCop/QPE/Application/camera/*
#
[datetime]
QCopSend/QCop/QPE/System/timeChange(QString)
QCopSend/QCop/QPE/System/setDateFormat()
QCopSend/QCop/QPE/System/timeZoneListChange()
QCopSend/QCop/QPE/System/clockChange(bool)
QCopSend/QCop/QPE/System/weekChange(bool)
#
[docapi]
QCopSend/QCop/QPE/DocAPI/registerCLS(QString,QStringList,int)
QCopSend/QCop/QPE/DocAPI/unregisterCLS(QString,int)
QCopSend/QCop/QPE/DocAPI/scanPath(QString,int)
QCopSend/QCop/QPE/System/categoriesChanged()
QCopSend/QCop/QPE/DocAPI/reflectMirror(QContentId,QContent::ChangeType)
QCopSend/QCop/QPE/System/contentChanged(QContentIdList,QContent::ChangeType)
QCopSend/QCop/QPE/System/addInstallPath(QString)
#
[drm]
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::activate(QContentId)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::activate(QContentId,QDrmRights::Permission,QString)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::reactivate(QContentId,QDrmRights::Permission)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleXmlRightsObject(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleWbxmlRightsObject(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleRoapTrigger(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleRoapPdu(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleProtectedRightsObject(QString)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::dcfReceived(QString)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::enableSilentRoap(bool)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::enableTransactionTracking(bool)
QCopSend/QCop/QPE/OmaDrmActivationRequest/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/OmaDrmActivationRequest/*
#
[graphics]
SetOpacity
#
[handwriting]
QCopSend/QCop/QPE/Handwriting/*
#
[language]
QCopSend/QCop/QPE/System/language(QString)
#
[launcher]
QCopSend/QCop/QPE/Application/qpe/Launcher::execute(QString)
QCopSend/QCop/QPE/Application/qpe/Launcher::execute(QString,QString)
QCopSend/QCop/QPE/Application/qpe/ContentSetView::showContentSet(QContentSet)
QCopSend/QCop/QPE/Application/qpe/ContentSetView::showContentSet(QString,QContentSet)
#
[lightandpower]
QCopSend/QCop/QPE/System/setBacklight(int)

#
[mediaserver]
QCopSend/QCop/QPE/MediaLibrary/*
QCopSend/QCop/QPE/MediaServer/MediaControl/Response/*
QCopSend/QCop/QPE/QSound/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/MediaServer*

#
[mediasession]
QCopSend/QCop/QPE/MediaServer/subscribe(QUuid)
QCopSend/QCop/QPE/MediaServer/open(QUuid,QString)
QCopSend/QCop/QPE/MediaServer/play(QUuid)
QCopSend/QCop/QPE/MediaServer/stop(QUuid)
QCopSend/QCop/QPE/MediaServer/revoke(QUuid)
QCopSend/QCop/QPE/MediaServer/setPriority(QUuid,int)
QCopSend/QCop/QPE/MediaServer/setVolume(QUuid,int)
QCopSend/QCop/QPE/MediaServer/MediaControl/Request/*
QCopSend/QCop/QPE/Application/sipagent/*
QCopSend/QCop/QPE/MediaSession/*
QCopSend/QCop/QPE/Application/mediaserver/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/MediaSession
QCopRegisterChannel/QCop/RegisterChannel/QPE/MediaLibrary/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/MediaServer/MediaControl/Response/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/QSound/*

#
[mediarecorder]
QCopSend/QCop/QPE/Application/mediarecorder/*

#
[msg]
QCopRegisterChannel/QCop/RegisterChannel/QPE/Mail
QCopRegisterChannel/QCop/RegisterChannel/QPE/Application/qtmail
QCopRegisterChannel/QCop/RegisterChannel/QPE/SysMessages
QCopSend/QCop/QPE/Mail/mailboxChanged(int,QString)
QCopSend/QCop/QPE/TaskBar/setLed(int,bool)
QCopSend/QCop/QPE/System/newSystemCount(int)
QCopSend/QCop/QPE/Application/qtmail/Email::writeMail(QString,QString)
QCopSend/QCop/QPE/Application/qtmail/SMS::writeSms(QString,QString)
QCopSend/QCop/QPE/Application/qtmail/Email::writeMessage(QString,QString,QStringList,QStringList)
QCopSend/QCop/QPE/Application/qtmail/SMS::smsVCard(QString,QString,QString,QString)
QCopSend/QCop/QPE/Application/qtmail/SMS::smsVCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/qtmail/Email::emailVCard(QString,QString,QString,QString)
QCopSend/QCop/QPE/Application/qtmail/Email::emailVCard(QDSActionRequest)
QCopSend/QCop/QPE/SysMessages/postMessage(int,QDateTime,QString,QString)
QCopSend/QCop/QPE/SysMessages/collectMessages()
QCopSend/QCop/QPE/SysMessages/ackMessage(int)
#
[net]
QCopSend/QCop/QPE/Application/netsetup/NetworkSetup::configureWap()
QCopRegisterChannel/QCop/RegisterChannel/QPE/NetworkState
QCopSend/QCop/QPE/Network/startInterface(QString,QString,QVariant)
QCopSend/QCop/QPE/Network/stopInterface(QString,QString,bool)
QCopSend/QCop/QPE/Network/setDefaultGateway(QString,bool)
QCopSend/QCop/QPE/VPNManager/connectVPN(uint)
QCopSend/QCop/QPE/VPNManager/disconnectVPN(uint)
#
[netconfig]
QCopSend/QCop/QPE/Network/setExtendedInterfaceLifetime(QString,bool)
QCopSend/QCop/QPE/Network/shutdownNetwork()
QCopSend/QCop/QPE/Network/privilegedInterfaceStop(QString)
QCopSend/QCop/QPE/NetworkState/updateNetwork()
QCopSend/QCop/QPE/NetworkState/wapChanged()
QCopSend/QCop/QPE/NetworkState/setLockMode(bool)
QCopSend/QCop/QPE/VPNManager/deleteVPN(uint)
#
[phonecomm]
QCopRegisterChannel/QCop/RegisterChannel/QPE/PhoneResponse
QCopRegisterChannel/QCop/RegisterChannel/QPE/Application/callforwarding
QCopSend/QCop/QPE/PhoneCommand/phoneCommand()
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
QCopSend/QCop/QPE/System/clearCellLocation()
QCopSend/QCop/QPE/System/displayCellLocation()
QCopSend/QCop/QPE/Application/qpe/Dialer::dial(QString,QString)
QCopSend/QCop/QPE/Application/qpe/Dialer::dial(QString,QUniqueId)
QCopSend/QCop/QPE/QSound/*
QCopSend/QCop/QPE/Communications/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Communications/*
ValueSpace/Set/Communications/*
#
[accessories]
QCopSend/QCop/QPE/Hardware/Accessories/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Hardware/Accessories/*
ValueSpace/Set/Hardware/Accessories/*
#
[pictures]
QCopSend/QCop/QPE/Application/photoedit/PhotoEdit::showCategory(QString)
QCopSend/QCop/QPE/Application/photoedit/PhotoEdit::editImage(QDSActionRequest)
#
[pim]
QCopRegisterChannel/QCop/RegisterChannel/QPE/PIM
QCopSend/QCop/QPE/PIM/*
QCopSend/QCop/QPE/System/wordsChanged(QString,int)
QCopSend/QCop/QPE/QDS/valueSupplied(QString,QString)
QCopSend/QCop/QPE/Application/addressbook/Contacts::setContactImage(QString)
QCopSend/QCop/QPE/Application/addressbook/Contacts::setContactImage(QDSActionRequest)
QCopSend/QCop/QPE/Application/addressbook/Contacts::beamVCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/addressbook/Contacts::beamVCardBluetooth(QDSActionRequest)
#
[libs]
#
[qdl]
QCopSend/QCop/QPE/Application/datebook/Calendar::requestLinks(QDSActionRequest)
QCopSend/QCop/QPE/Application/addressbook/Contacts::requestLinks(QDSActionRequest)
QCopSend/QCop/QPE/Application/todolist/Tasks::requestLinks(QDSActionRequest)
QCopSend/QCop/QPE/Application/datebook/Calendar::activateLink(QDSActionRequest)
QCopSend/QCop/QPE/Application/addressbook/Contacts::activateLink(QDSActionRequest)
QCopSend/QCop/QPE/Application/todolist/Tasks::activateLink(QDSActionRequest)
#
[qds]
QCopSend/QCop/QPE/QDSResponse*
QCopRegisterChannel/QCop/RegisterChannel/QPE/QDSResponse*
#
[quicklauncher]
QCopRegisterChannel/QCop/RegisterChannel/QPE/pid/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/QuickLauncher*
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
ChangeAltitude
RegionDestroy
QCopSend/QCop//detach()
QCopSend/QCop/QPE/QuickLauncher/available(int)
QCopSend/QCop/QPE/QuickLauncher/running(QString,int)
QCopSend/QCop/QPE/QuickLauncher/exited(int)
QCopSend/QCop/QPE/QuickLauncher/crashed(int)
QCopSend/QCop/QPE/QuickLauncher/pid/*
#
[profiles]
QCopRegisterChannel/QCop/RegisterChannel/QPE/PhoneProfiles
QCopSend/QCop/QPE/PhoneProfiles/profileChanged()
QCopSend/QCop/QPE/Application/profileedit/SettingsManager::pushSettingStatus(QString,QString,QString)
QCopSend/QCop/QPE/Application/profileedit/SettingsManager::pullSettingStatus(QString,QString,QString)
QCopSend/QCop/QPE/Application/profileedit/Profiles::setProfile(int)
QCopSend/QCop/QPE/System/applyStyle()
QCopSend/QCop/QPE/System/applyStyleSplash()
QCopSend/QCop/QPE/System/applyStyleNoSplash()
QCopSend/QCop/QPE/Application/appearance/Settings::pullSettingStatus()
QCopSend/QCop/QPE/Application/appearance/Settings::activateDefault()
QCopSend/QCop/QPE/Application/appearance/Settings::activateSettings(QString)
QCopSend/QCop/QPE/Application/appearance/Settings::setStatus(bool,QString)
QCopSend/QCop/QPE/Application/light-and-power/Settings::pullSettingStatus()
QCopSend/QCop/QPE/Application/light-and-power/Settings::activateDefault()
QCopSend/QCop/QPE/Application/light-and-power/Settings::activateSettings(QString)
QCopSend/QCop/QPE/Application/light-and-power/Settings::setStatus(bool,QString)
QCopSend/QCop/QPE/Application/callforwarding/Settings::pullSettingStatus()
QCopSend/QCop/QPE/Application/callforwarding/Settings::activateDefault()
QCopSend/QCop/QPE/Application/callforwarding/Settings::activateSettings(QString)
QCopSend/QCop/QPE/Application/callforwarding/Settings::setStatus(bool,QString)

#
[rotation]
QCopSend/QCop/QPE/System/setDefaultRotation(int)

#
[screensaver]
QCopSend/QCop/QPE/Application/qpe/ScreenSaver::setTemporaryMode(int,QString)

[screensaverconfig]
QCopSend/QCop/QPE/Application/qpe/ScreenSaver::setIntervals(int,int,int)
QCopSend/QCop/QPE/Application/qpe/ScreenSaver::setDefaultIntervals()
QCopSend/QCop/QPE/Application/qpe/ScreenSaver::setBacklight(int)
QCopRegisterChannel/QCop/RegisterChannel/QPE/ScreenSaverStatus
#
[security]
QCopSend/QCop/QPE/System/securityChanged()
#
[sxemonitor]
QCopSend/QCop/QPE/Application/sysmessages/SystemMessages::showDialog(QString,QString)
QCopSend/QCop/QPE/Application/sysmessages/SystemMessages::sendMessage(QString,QString)

QCopRegisterChannel/QCop/RegisterChannel/QPE/System
QCopRegisterChannel/QCop/RegisterChannel/QPE/pid/*
#
[window]
Create
RegionDestroy
ChangeAltitude
IMUpdate
IMMouse
IMResponse
GrabMouse
GrabKeyboard
QCopSend/QCop//isRegistered()
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
QCopRegisterChannel/QCop/RegisterChannel/QPE/pid/*
QCopSend/QCop/QPE/QSoftMenuBar/setLabelPixmap(int,int,QString)
QCopSend/QCop/QPE/QSoftMenuBar/setLabelText(int,int,QString)
QCopSend/QCop/QPE/QSoftMenuBar/clearLabel(int,int)
QCopSend/QCop/QPE/InputMethod/*
QCopSend/QCop/QPE/System/updateContextLabels()
QCopSend/QCop/QPE/System/serverKey(int,int)
QCopSend/QCop/QPE/Application/helpbrowser/Help::setDocument(QString)
QCopSend/QCop/QPE/System/appRaised(QString)
#
[words]
QCopSend/QCop/QPE/System/wordsChanged(QString,int)
#
[print]
QCopSend/QCop/QPE/Service/Print/print(QVariant)
QCopSend/QCop/QPE/Service/Print/done(bool)
QCopSend/QCop/QPE/Application/printserver/Print::print(QString)
QCopSend/QCop/QPE/Application/printserver/Print::print(QString,QString)
QCopSend/QCop/QPE/Application/printserver/Print::printHtml(QString)
#
[voip]
QCopSend/QCop/QPE/Application/sipsettings/VoIP::configure()
#
[deny]
