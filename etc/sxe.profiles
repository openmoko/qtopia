[allow]
RegionName
SetProperty
GetProperty
AddProperty
Region
RegionMove
RepaintRegion
Identify
RequestFocus
QCopSend/QCop/QPE/QtopiaApplication/available(QString,int)
QCopSend/QCop/QPE/QtopiaApplication/notBusy(QString)
QCopSend/QCop/QPE/QtopiaApplication/closing(QString)
QCopSend/QCop/Qtopia/TerminationHandler/installHandler(QTerminationHandlerData)
QCopSend/QCop/Qtopia/TerminationHandler/removeHandler(QString)
QCopSend/QCop//detach()
ValueSpace/Sync
SelectCursor
DefineCursor
Shutdown
DocumentServer/QContentStoreServer::contentFromId(QContentId)
DocumentServer/QContentStoreServer::contentFromFileName(QString,001)
DocumentServer/QContentStoreServer::contentFromFileName(QString,101)
DocumentServer/QContentStoreServer::contentCategories(QContentId)
DocumentServer/QContentStoreServer::contentProperties(QContentId)
DocumentServer/QContentStoreServer::contentMimeTypes(QContentId)
DocumentServer/QContentStoreServer::mimeTypeFromId(QString)
DocumentServer/QContentStoreServer::contentPermissions(QContentId)
DocumentServer/QContentStoreServer::contentSize(QContentId)
DocumentServer/QContentStoreServer::associationsForApplication(QString)
DocumentServer/QContentStoreServer::associationsForMimeType(QString)
DocumentServer/QContentStoreServer::contentValid(QContentId)
DocumentServer/QContentStoreServer::contentRights(QContentId,QDrmRights::Permission)
DocumentServer/QCategoryStoreServer::categoryExists(QString)
DocumentServer/QCategoryStoreServer::categoryFromId(QString)
DocumentServer/QCategoryStoreServer::scopeCategories(QString)
#
[alarm]
QCopSend/QCop/QPE/AlarmServer/deleteAlarm(QDateTime,QString,QString,int)
QCopSend/QCop/QPE/AlarmServer/addAlarm(QDateTime,QString,QString,int)
QCopSend/QCop/QPE/AlarmServer/dailyAlarmEnabled(bool)
QCopSend/QCop/QPE/Application/qpe/Alert::soundAlarm()
QCopSend/QCop/QPE/Application/qpe/Alert::soundAlert()
#
[base]
QCopRegisterChannel/QCop/RegisterChannel/QPE*
QCopSend/QCop/QPE*
QCopRegisterChannel/QCop/RegisterChannel/Qtopia/TerminationHandler
#
[beaming]
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamBusinessCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamCalendar(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamFile(QString,QString,QString,bool)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamFile(QContentId)
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamPersonalBusinessCard()
QCopSend/QCop/QPE/Application/qpe/InfraredBeaming::beamBusinessCard(QContact)

#
[bluetooth]
QCopRegisterChannel/QCop/RegisterChannel/QPE/Application/btsettings
QCopSend/QCop/QPE/DocAPI/registerCLS(QString,QStringList,int)
QCopSend/QCop/QPE/DocAPI/unregisterCLS(QString,int)
QCopSend/QCop/QPE/BluetoothServiceProviders/*
QCopSend/QCop/QPE/BluetoothServiceListeners/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/BluetoothServiceProviders
QCopRegisterChannel/QCop/RegisterChannel/QPE/BluetoothServiceListeners
QCopRegisterChannel/QCop/RegisterChannel/QPE/BluetoothHandsfree
QCopSend/QCop/QPE/BluetoothHandsfree/*
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushBusinessCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushPersonalBusinessCard()
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushPersonalBusinessCard(QBluetoothAddress)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushBusinessCard(QContact)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushCalendar(QDSActionRequest)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushFile(QString,QString,QString,bool)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushFile(QContentId)
QCopSend/QCop/QPE/Application/qpe/BluetoothPush::pushFile(QBluetoothAddress,QContentId)
QCopRegisterChannel/QCop/RegisterChannel/QPE/Communications/QBluetoothAudioGateway/Response/BluetoothHandsfree
QCopRegisterChannel/QCop/RegisterChannel/QPE/Communications/QBluetoothAudioGateway/Response/BluetoothHeadset
QCopSend/QCop/QPE/Communications/QBluetoothAudioGateway/*
#
[cardreader]
QCopRegisterChannel/QCop/RegisterChannel/QPE/QStorage
#
[camera]
QCopSend/QCop/QPE/Application/camera/*
#
[clock]
QCopSend/QCop/QPE/Clock/showClock()
QCopSend/QCop/QPE/Alarm/editAlarm()
#
[datetime]
QCopSend/QCop/QPE/System/timeChange(QString)
QCopSend/QCop/QPE/System/setDateFormat()
QCopSend/QCop/QPE/System/timeZoneListChange()
QCopSend/QCop/QPE/System/clockChange(bool)
QCopSend/QCop/QPE/System/weekChange(bool)
QCopSend/QCop/QPE/Application/systemtime/Time::editTime()
QCopSend/QCop/QPE/Application/systemtime/Date::editDate()
QCopSend/QCop/QPE/Application/qpe/TimeUpdate::updateFromExternalSources()
QCopSend/QCop/QPE/Application/qpe/TimeUpdate::updateFromExternalSources(bool,bool,bool,bool)
QCopSend/QCop/QPE/Application/qpe/TimeUpdate::storeExternalSource(QString,uint,int,int)
QCopSend/QCop/QPE/Application/qpe/TimeUpdate::changeSystemTime(uint,QString)
QCopSend/QCop/QPE/Alarm/setDailyEnabled(int)
#
[dbmigrate]
QCopSend/QCop/QPE/Application/dbmigrate/DBMigrationEngine::ensureTableExists(QDSActionRequest)
#
[docapi]
QCopSend/QCop/QPE/DocAPI/registerCLS(QString,QStringList,int)
QCopSend/QCop/QPE/DocAPI/unregisterCLS(QString,int)
QCopSend/QCop/QPE/DocAPI/scanPath(QString,int)
QCopSend/QCop/QPE/System/categoriesChanged()
QCopSend/QCop/QPE/DocAPI/reflectMirror(QContentId,QContent::ChangeType)
QCopSend/QCop/QPE/DocAPI/contentChanged(QContentIdList,QContent::ChangeType)
QCopSend/QCop/QPE/System/addInstallPath(QString)
QCopSend/QCop/QPE/QDSResponse/*
QCopSend/QCop/QPE/QDSResponse/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/DocAPI
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
QCopRegisterChannel/QCop/RegisterChannel/QPE/pid/*
#
[drm]
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::activate(QContentId)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::activate(QContentId,QDrmRights::Permission,QString)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::reactivate(QContentId,QDrmRights::Permission)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleXmlRightsObject(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleWbxmlRightsObject(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleRoapTrigger(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleRoapPdu(QDSActionRequest)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::handleProtectedRightsObject(QString)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::dcfReceived(QString)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::enableSilentRoap(bool)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::enableTransactionTracking(bool)
QCopSend/QCop/QPE/Application/drmbrowser/OmaDrmAgent::convertMessage(QDSActionRequest)
QCopSend/QCop/QPE/OmaDrmActivationRequest/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/OmaDrmActivationRequest/*
#
[graphics]
SetOpacity
#
[handwriting]
QCopSend/QCop/QPE/Handwriting/*
#
[input]
QCopSend/QCop/QPE/Application/qpe/VirtualKeyboard::sendKeyEvent(int,int,int,bool,bool)
QCopSend/QCop/QPE/Application/qpe/VirtualKeyboard::processKeyEvent(int,int,int,bool,bool)
#
[language]
QCopSend/QCop/QPE/System/language(QString)
#
[launcher]
QCopSend/QCop/QPE/Application/qpe/Launcher::execute(QString)
QCopSend/QCop/QPE/Application/qpe/Launcher::execute(QString,QString)
QCopSend/QCop/QPE/Application/qpe/ContentSetView::showContentSet(QContentSet)
QCopSend/QCop/QPE/Application/qpe/ContentSetView::showContentSet(QString,QContentSet)
QCopSend/QCop/QPE/RunningAppsLauncherViewService/*
DocumentServer/QContentStoreServer::executeContent(QContentId,QStringList)
#
[keymanager]
#
# Allows access to the devices key management /proc nodes
#
[lightandpower]
QCopRegisterChannel/QCop/RegisterChannel/Qtopia/PowerStatus
QCopRegisterChannel/QCop/RegisterChannel/QPE/Hardware/Accessories/QPowerSource/Response/*
QCopSend/QCop/QPE/Application/qpe/QtopiaPowerManager::setConstraint(int,QString)
QCopSend/QCop/QPE/Application/qpe/QtopiaPowerManager::setBacklight(int)
QCopSend/QCop/QPE/Application/qpe/QtopiaPowerManager::setIntervals(int,int,int)
QCopSend/QCop/QPE/Application/qpe/QtopiaPowerManager::setDefaultIntervals()
QCopSend/QCop/QPE/Application/qpe/QtopiaPowerManager::setActive(bool)
#
[volumemanager]
QCopSend/QCop/QPE/AudioVolumeManager/setVolume(int)
QCopSend/QCop/QPE/AudioVolumeManager/increaseVolume(int)
QCopSend/QCop/QPE/AudioVolumeManager/decreaseVolume(int)
QCopSend/QCop/QPE/AudioVolumeManager/setMuted(bool)
QCopSend/QCop/QPE/AudioVolumeManager/registerHandler(QString,QString)
QCopSend/QCop/QPE/AudioVolumeManager/unregisterHandler(QString,QString)
QCopSend/QCop/QPE/AudioVolumeManager/setActiveDomain(QString)
QCopSend/QCop/QPE/AudioVolumeManager/resetActiveDomain(QString)
#
[mediaserver]
QCopSend/QCop/QPE/MediaLibrary/*
QCopSend/QCop/QPE/Media/Library/Control/*
QCopSend/QCop/QPE/QSound/*
QCopSend/QCop/QPE/Media/Control/Helix/Settings/Response/HelixGlobalSettings/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/MediaServer*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Media/Server/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Media/Control/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Media/Control/Helix/Settings/Request/HelixGlobalSettings
#
[mediasession]
QCopSend/QCop/QPE/Application/sipagent/*
QCopSend/QCop/QPE/MediaSession/*
QCopSend/QCop/QPE/MediaServer/subscribe(QUuid)
QCopSend/QCop/QPE/MediaServer/open(QUuid,QString)
QCopSend/QCop/QPE/MediaServer/play(QUuid)
QCopSend/QCop/QPE/MediaServer/stop(QUuid)
QCopSend/QCop/QPE/MediaServer/revoke(QUuid)
QCopSend/QCop/QPE/MediaServer/setPriority(int)
QCopSend/QCop/QPE/MediaServer/setPriority(QUuid,int)
QCopSend/QCop/QPE/MediaServer/setVolume(QUuid,int)
QCopSend/QCop/QPE/Media/Server/Control/*
QCopSend/QCop/QPE/Application/mediaserver/*
QCopSend/QCop/QPE/Media/Control/Helix/Settings/Request/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/MediaSession
QCopRegisterChannel/QCop/RegisterChannel/QPE/MediaLibrary/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Media/Library/Control/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/QSound/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Media/Control/Helix/Settings/Response/HelixGlobalSettings

#
[mediarecorder]
QCopSend/QCop/QPE/Application/mediarecorder/*
QCopRegisterChannel/QCop/RegisterChannel/Qt/Tray

#
[msg]
QCopRegisterChannel/QCop/RegisterChannel/QPE/Mail
QCopRegisterChannel/QCop/RegisterChannel/QPE/Application/qtmail
QCopRegisterChannel/QCop/RegisterChannel/QPE/SysMessages
QCopSend/QCop/QPE/Mail/mailboxChanged(int,QString)
QCopSend/QCop/QPE/TaskBar/setLed(int,bool)
QCopSend/QCop/QPE/System/newSystemCount(int)
QCopSend/QCop/QPE/System/newMmsCount(int)
QCopSend/QCop/QPE/Application/qtmail/Email::viewMail(QMailId)
QCopSend/QCop/QPE/Application/qtmail/Email::writeMail(QString,QString)
QCopSend/QCop/QPE/Application/qtmail/Email::writeMessage(QString,QString,QStringList,QStringList)
QCopSend/QCop/QPE/Application/qtmail/SMS::writeSms()
QCopSend/QCop/QPE/Application/qtmail/SMS::writeSms(QString,QString)
QCopSend/QCop/QPE/Application/qtmail/SMS::writeSms(QString,QString,QString)
QCopSend/QCop/QPE/Application/qtmail/SMS::viewSms()
QCopSend/QCop/QPE/Application/qtmail/SMS::viewSmsList()
QCopSend/QCop/QPE/Application/qtmail/SMS::smsVCard(QString,QString)
QCopSend/QCop/QPE/Application/qtmail/SMS::smsVCard(QString,QString,QString,QString)
QCopSend/QCop/QPE/Application/qtmail/SMS::smsVCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/qtmail/SMS::pushMmsMessage(QDSActionRequest)
QCopSend/QCop/QPE/Application/qtmail/SMS::flashSms(QDSActionRequest)
QCopSend/QCop/QPE/Application/qtmail/Email::emailVCard(QString,QMailId,QString,QString)
QCopSend/QCop/QPE/Application/qtmail/Email::emailVCard(QDSActionRequest)
QCopSend/QCop/QPE/Application/qtmail/Messages::viewMessage(QMailId)
QCopSend/QCop/QPE/SysMessages/postMessage(int,QDateTime,QString,QString)
QCopSend/QCop/QPE/SysMessages/collectMessages()
QCopSend/QCop/QPE/SysMessages/ackMessage(int)
QCopSend/QCop/QPE/Application/dbmigrate/DBMigrationEngine::ensureTableExists(QDSActionRequest)
#
[net]
QCopSend/QCop/QPE/Application/netsetup/NetworkSetup::configureWap()
QCopRegisterChannel/QCop/RegisterChannel/QPE/NetworkState
QCopSend/QCop/QPE/Network/startInterface(QString,QString,QVariant)
QCopSend/QCop/QPE/Network/stopInterface(QString,QString,bool)
QCopSend/QCop/QPE/Network/setDefaultGateway(QString,bool)
QCopSend/QCop/QPE/VPNManager/connectVPN(uint)
QCopSend/QCop/QPE/VPNManager/disconnectVPN(uint)
#
[netadmin]
# activates CAP_NET_ADMIN mac rules
#
[netconfig]
QCopSend/QCop/QPE/Network/setExtendedInterfaceLifetime(QString,bool)
QCopSend/QCop/QPE/Network/shutdownNetwork()
QCopSend/QCop/QPE/Network/privilegedInterfaceStop(QString)
QCopSend/QCop/QPE/NetworkState/updateNetwork()
QCopSend/QCop/QPE/NetworkState/wapChanged()
QCopSend/QCop/QPE/NetworkState/setLockMode(bool)
QCopSend/QCop/QPE/VPNManager/deleteVPN(uint)
#
[phonecomm]
QCopRegisterChannel/QCop/RegisterChannel/QPE/PhoneResponse
QCopRegisterChannel/QCop/RegisterChannel/QPE/Application/callforwarding
QCopSend/QCop/QPE/PhoneCommand/phoneCommand()
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
QCopSend/QCop/QPE/System/clearCellLocation()
QCopSend/QCop/QPE/System/displayCellLocation()
QCopSend/QCop/QPE/Application/qpe/Dialer::dial(QString,QString)
QCopSend/QCop/QPE/Application/qpe/Dialer::dial(QString,QUniqueId)
QCopSend/QCop/QPE/Application/qpe/Dialer::showDialer(QString)
QCopSend/QCop/QPE/Application/qpe/Ringtone::startMessageRingtone()
QCopSend/QCop/QPE/Application/qpe/Ringtone::stopMessageRingtone()
QCopSend/QCop/QPE/Application/qpe/Ringtone::startRingtone(QString)
QCopSend/QCop/QPE/Application/qpe/Ringtone::stopRingtone(QString)
QCopSend/QCop/QPE/Messages/*
QCopSend/QCop/QPE/QSound/*
QCopSend/QCop/QPE/Communications/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Communications/*
ValueSpace/Set/Communications/*
#
[modem]
#
# Allows access to the raw telephony /dev/ nodes
# This is not needed for most applications
#
[accessories]
QCopSend/QCop/QPE/Hardware/Accessories/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/Hardware/Accessories/*
ValueSpace/Set/Hardware/Accessories/*
#
[pictures]
QCopSend/QCop/QPE/Application/photoedit/PhotoEdit::showCategory(QString)
QCopSend/QCop/QPE/Application/photoedit/PhotoEdit::editImage(QDSActionRequest)
#
[pim]
QCopRegisterChannel/QCop/RegisterChannel/QPE/PIM
QCopRegisterChannel/QCop/RegisterChannel/QPE/Communications/QSimInfo/Response/modem
QCopRegisterChannel/QCop/RegisterChannel/QPE/Communications/QPhoneBook/Response/modem
QCopSend/QCop/QPE/Communications/QPhoneBook/Request/modem/getEntries(QString)
QCopSend/QCop/QPE/Communications/QPhoneBook/Request/modem/requestLimits(QString)
QCopSend/QCop/QPE/Communications/QPhoneBook/Request/modem/add(QPhoneBookEntry,QString,bool)
QCopSend/QCop/QPE/Communications/QPhoneBook/Request/modem/remove(uint,QString,bool)
QCopSend/QCop/QPE/Communications/QPhoneBook/Request/modem/update(QPhoneBookEntry,QString,bool)
QCopSend/QCop/QPE/Communications/QPhoneBook/Request/modem/flush()
QCopSend/QCop/QPE/PIM/*
QCopSend/QCop/QPE/System/wordsChanged(QString,int)
QCopSend/QCop/QPE/QDS/valueSupplied(QString,QString)
QCopRegisterChannel/QCop/RegisterChannel/QPE/CallList
QCopSend/QCop/QPE/CallList/updated()
QCopSend/QCop/QPE/Application/addressbook/Contacts::*
QCopSend/QCop/QPE/Application/addressbook/ContactsPhone::*
QCopSend/QCop/QPE/Application/todolist/Tasks::*
QCopSend/QCop/QPE/Application/datebook/Calendar::*
DocumentServer/QCategoryStoreServer::addCategory(QString,QString,QString,QString,bool)
DocumentServer/QCategoryStoreServer::scopeCategories(QString)
DocumentServer/QCategoryStoreServer::removeCategory(QString)
DocumentServer/QCategoryStoreServer::setCategoryScope(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryIcon(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryRingTone(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryLabel(QString,QString)
DocumentServer/QCategoryStoreServer::setSystemCategory(QString)
#
[callhistory]
QCopSend/QCop/QPE/Application/qpe/CallHistory::showCallHistory(QCallList::ListType)
QCopSend/QCop/QPE/Application/qpe/CallHistory::viewDetails(QCallListItem,QContact,int)
[policy]
# access to the SXE policy files in the Qtopia/etc directory
#
[prefix]
# access to the prefix directory for writing qtopia_db.sqlite, the system database
#
[libs]
#
[qdl]
QCopSend/QCop/QPE/Application/datebook/Calendar::requestLinks(QDSActionRequest)
QCopSend/QCop/QPE/Application/addressbook/Contacts::requestLinks(QDSActionRequest)
QCopSend/QCop/QPE/Application/todolist/Tasks::requestLinks(QDSActionRequest)
QCopSend/QCop/QPE/Application/datebook/Calendar::activateLink(QDSActionRequest)
QCopSend/QCop/QPE/Application/addressbook/Contacts::activateLink(QDSActionRequest)
QCopSend/QCop/QPE/Application/todolist/Tasks::activateLink(QDSActionRequest)
#
[qds]
QCopSend/QCop/QPE/QDSResponse*
QCopRegisterChannel/QCop/RegisterChannel/QPE/QDSResponse*
#
[quicklauncher]
QCopRegisterChannel/QCop/RegisterChannel/QPE/pid/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/QuickLauncher*
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
ChangeAltitude
RegionDestroy
QCopSend/QCop//detach()
QCopSend/QCop/QPE/QuickLauncher/available(int)
QCopSend/QCop/QPE/QuickLauncher/running(QString,int)
QCopSend/QCop/QPE/QuickLauncher/exited(int)
QCopSend/QCop/QPE/QuickLauncher/crashed(int)
QCopSend/QCop/QPE/QuickLauncher/pid/*
Font
#
[packagemanagement]
QCopSend/QCop/QPE/Application/*
#
[profiles]
QCopRegisterChannel/QCop/RegisterChannel/QPE/PhoneProfiles
QCopSend/QCop/QPE/PhoneProfiles/profileChanged()
QCopSend/QCop/QPE/Application/profileedit/SettingsManager::pushSettingStatus(QString,QString,QString)
QCopSend/QCop/QPE/Application/profileedit/SettingsManager::pullSettingStatus(QString,QString,QString)
QCopSend/QCop/QPE/Application/profileedit/Profiles::setProfile(int)
QCopSend/QCop/QPE/Profiles/activatePlaneMode()
QCopSend/QCop/QPE/Profiles/showProfiles()
QCopSend/QCop/QPE/System/restart()
QCopSend/QCop/QPE/System/applyStyle()
QCopSend/QCop/QPE/System/applyStyleSplash()
QCopSend/QCop/QPE/System/applyStyleNoSplash()
QCopSend/QCop/QPE/System/applyHomeScreenImage()
QCopSend/QCop/QPE/System/updateHomeScreenInfo()
QCopSend/QCop/QPE/System/applyBackgroundImage()
QCopSend/QCop/QPE/System/applySecondaryBackgroundImage()
QCopSend/QCop/QPE/Application/appearance/Settings::pullSettingStatus()
QCopSend/QCop/QPE/Application/appearance/Settings::activateDefault()
QCopSend/QCop/QPE/Application/appearance/Settings::activateSettings(QString)
QCopSend/QCop/QPE/Application/appearance/Settings::setStatus(bool,QString)
QCopSend/QCop/QPE/Application/light-and-power/Settings::pullSettingStatus()
QCopSend/QCop/QPE/Application/light-and-power/Settings::activateDefault()
QCopSend/QCop/QPE/Application/light-and-power/Settings::activateSettings(QString)
QCopSend/QCop/QPE/Application/light-and-power/Settings::setStatus(bool,QString)
QCopSend/QCop/QPE/Application/callforwarding/Settings::pullSettingStatus()
QCopSend/QCop/QPE/Application/callforwarding/Settings::activateDefault()
QCopSend/QCop/QPE/Application/callforwarding/Settings::activateSettings(QString)
QCopSend/QCop/QPE/Application/callforwarding/Settings::setStatus(bool,QString)
#
[security]
QCopSend/QCop/QPE/System/securityChanged()
#
[sxemonitor]
QCopSend/QCop/QPE/Application/sysmessages/SystemMessages::showDialog(QString,QString)
QCopSend/QCop/QPE/Application/sysmessages/SystemMessages::sendMessage(QString,QString)
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
QCopRegisterChannel/QCop/RegisterChannel/QPE/pid/*
#
[syslog]
# gives access to the /dev/log socket for syslog() calls
#
[nice]
# allows applications to adjust their nice value
#
[kill]
# allows applications to kill other processes
QCopSend/QCop/QPE/Application/qpe/Launcher::kill(QString)
#
[cameraservice]
# allows applications to access the camera device
#
[directaudio]
# allows applications to directly access the audio device
#
[window]
Create
RegionDestroy
ChangeAltitude
IMUpdate
IMMouse
IMResponse
GrabMouse
GrabKeyboard
QCopSend/QCop//isRegistered()
QCopRegisterChannel/QCop/RegisterChannel/QPE/System
QCopRegisterChannel/QCop/RegisterChannel/QPE/pid/*
QCopSend/QCop/QPE/QSoftMenuBar/setLabelPixmap(int,int,QString)
QCopSend/QCop/QPE/QSoftMenuBar/setLabelText(int,int,QString)
QCopSend/QCop/QPE/QSoftMenuBar/clearLabel(int,int)
QCopSend/QCop/QPE/NaviPane/*
QCopSend/QCop/QPE/InputMethod/*
QCopSend/QCop/QPE/System/updateContextLabels()
QCopSend/QCop/QPE/System/serverKey(int,int)
QCopSend/QCop/QPE/Application/helpbrowser/Help::setDocument(QString)
QCopSend/QCop/QPE/Application/qpe/QtopiaPowerManager::setConstraint(int,QString)
QCopSend/QCop/QPE/QtopiaApplication/appRaised(QString)
QCopRegisterChannel/QCop/RegisterChannel/QPE/QStorage
Font
#
[words]
QCopSend/QCop/QPE/System/wordsChanged(QString,int)
#
[print]
QCopSend/QCop/QPE/Service/Print/print(QVariant)
QCopSend/QCop/QPE/Service/Print/done(bool)
QCopSend/QCop/QPE/Application/printserver/Print::print(QString)
QCopSend/QCop/QPE/Application/printserver/Print::print(QString,QString)
QCopSend/QCop/QPE/Application/printserver/Print::printHtml(QString)
#
[voip]
QCopSend/QCop/QPE/Application/sipsettings/VoIP::configure()
#
[homescreensettings]
QCopSend/QCop/QPE/Application/homescreen/HomescreenSettings::configure()
#
[qdsync]
# Allows access to various files on the device (eg. /dev/ttyUSB0 on the Greenphone)
# Any QCop messages that need to be delivered via qdsync should be specified here
#
# This is for device_updater, which sends this to initiate package installation
QCopSend/QCop/QPE/Application/packagemanager/PackageManager::installPackageConfirm(QString)
#
[doc_read]
DocumentServer/QContentStoreServer::openContent(QContent,QIODevice::OpenMode,01)
#
[doc_write]
DocumentServer/QContentStoreServer::commitContent(QContent)
DocumentServer/QContentStoreServer::removeContent(QContentId)
DocumentServer/QContentStoreServer::moveContentTo(QContentId,QString)
DocumentServer/QContentStoreServer::copyContentTo(QContentId,QString)
DocumentServer/QContentStoreServer::openContent(QContent,QIODevice::OpenMode,01)
DocumentServer/QContentStoreServer::openContent(QContent,QIODevice::OpenMode,10)
DocumentServer/QContentStoreServer::openContent(QContent,QIODevice::OpenMode,11)
DocumentServer/QContentStoreServer::contentFromFileName(QString,101)
DocumentServer/QContentStoreServer::contentFromFileName(QString,111)
#
[doc_mimetypes]
DocumentServer/QContentStoreServer::addAssociation(QString,QString,QString,QDrmRights::Permission)
DocumentServer/QContentStoreServer::removeAssociation(QString,QString)
DocumentServer/QContentStoreServer::setDefaultApplicationFor(QString,QString)
#
[doc_server]
DocumentServer/QContentStoreServer::filterMatches(QContentFilter,QContentFilter::FilterType,QString)
DocumentServer/QContentStoreServer::contentCount(QContentFilter)
DocumentServer/QContentStoreServer::createContentSet(QContentSet::UpdateMode)
DocumentServer/QContentStoreServer::contentSetCount(int)
DocumentServer/QContentStoreServer::contentSetFrame(int,int,int)
DocumentServer/QContentStoreServer::contentSetContains(int,QContent)
DocumentServer/QContentStoreServer::releaseContentSet(int)
DocumentServer/QContentStoreServer::setContentSetFilter(int,QContentFilter)
DocumentServer/QContentStoreServer::setContentSetSortOrder(int,QContentSortCriteria)
DocumentServer/QContentStoreServer::setContentSetCriteria(int,QContentFilter,QContentSortCriteria)
DocumentServer/QContentStoreServer::insertContentIntoSet(int,QContent)
DocumentServer/QContentStoreServer::removeContentFromSet(int,QContent)
DocumentServer/QCategoryStoreServer::addCategory(QString,QString,QString,QString,bool)
DocumentServer/QCategoryStoreServer::scopeCategories(QString)
DocumentServer/QCategoryStoreServer::removeCategory(QString)
DocumentServer/QCategoryStoreServer::setCategoryScope(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryIcon(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryRingTone(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryLabel(QString,QString)
DocumentServer/QCategoryStoreServer::setSystemCategory(QString)
QCopRegisterChannel/QCop/RegisterChannel/QPE/DocAPI
#
[doc_install]
DocumentServer/QContentStoreServer::contentFromFileName(QString,100)
DocumentServer/QContentStoreServer::contentFromFileName(QString,110)
DocumentServer/QContentStoreServer::uninstallContent(QContentId)
DocumentServer/QContentStoreServer::batchCommitContent(QContentList)
DocumentServer/QContentStoreServer::batchUninstallContent(QContentIdList)
#
[doc_open]
DocumentServer/QDocumentSelectorServer::openDocument(QContentFilter,QContentSortCriteria)
#
[doc_save]
DocumentServer/QDocumentSelectorServer::newDocument(QString,QStringList)
DocumentServer/QDocumentSelectorServer::saveDocument()
#
[categories]
DocumentServer/QCategoryStoreServer::addCategory(QString,QString,QString,QString,bool)
DocumentServer/QCategoryStoreServer::removeCategory(QString)
DocumentServer/QCategoryStoreServer::setCategoryScope(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryIcon(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryRingTone(QString,QString)
DocumentServer/QCategoryStoreServer::setCategoryLabel(QString,QString)
DocumentServer/QCategoryStoreServer::setSystemCategory(QString)
#
[audio-policy]
QCopSend/QCop/QPE/AudioStateManager/*
QCopRegisterChannel/QCop/RegisterChannel/QPE/AudioStateManager
# Ugly fix until Sarah fixes SXE
QCopSend/QCop/QPE/GreenphoneModem/*
#
[tmp_write]
#
# Allows access to write to /tmp
# (this is not needed if just reading from /tmp
#
#
[deny]
