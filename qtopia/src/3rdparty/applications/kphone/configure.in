dnl Process this file with autoconf to produce a configure script.
AC_INIT(README)

AC_CONFIG_HEADER(config.h)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_GCC_TRADITIONAL

dnl Check for Qt preprocessor 'moc'
AC_PATH_PROG(MOC, moc, /usr/local/bin/moc, $QTDIR/bin:$PATH:/usr/bin:/usr/X11R6/bin:/usr/lib/qt/bin::/usr/lib/qt3/bin:/usr/local/qt/bin:/usr/share/qt3/bin)

dnl Check for Qt GUI compiler 'uic'
AC_PATH_PROG(UIC, uic, /usr/local/bin/uic, $QTDIR/bin:$PATH:/usr/bin:/usr/X11R6/bin:/usr/lib/qt/bin:/usr/lib/qt3/bin:/usr/local/qt/bin:/usr/share/qt3/bin)

dnl Look in various places for Qt header files and libraries
AC_CACHE_CHECK(location of Qt header files,
  ac_cv_qt_inc, [
  if test -f $QTDIR/include/qglobal.h; then
    ac_cv_qt_inc=$QTDIR/include
  elif test -f /usr/lib/qt-3.1/include/qglobal.h; then
    ac_cv_qt_inc=/usr/lib/qt-3.1/include
  elif test -f /usr/lib/qt3/include/qglobal.h; then
    ac_cv_qt_inc=/usr/lib/qt3/include
  elif test -f /usr/local/include/qt/qglobal.h; then
    ac_cv_qt_inc=/usr/local/include/qt
  elif test -f /usr/include/qt/qglobal.h; then
    ac_cv_qt_inc=/usr/include/qt
  elif test -f /usr/share/qt3/include/qglobal.h; then
    ac_cv_qt_inc=/usr/share/qt3/include
  elif test -f /usr/include/qglobal.h; then
    ac_cv_qt_inc=/usr/include
  fi
]);

if test "$ac_cv_qt_inc" = ""; then
  echo "not found. Giving up."
  exit
fi

dnl Look for Qt library files
AC_CACHE_CHECK(location of Qt library,
  ac_cv_qt_lib, [
  for T in $QTDIR/lib $QTDIR /usr/lib/qt3 /usr/lib/qt3/lib64 /usr/lib/qt-3.1/lib /usr/lib/qt3/lib /usr/local/lib/qt /usr/share/qt3/lib /usr/lib; do
     if test "x$ac_cv_qt_lib" = "x"; then
       if test -f $T/libqt-mt.so -o -f $T/libqt-mt.a; then
         ac_cv_qt_lib=$T;
         qt_mt=yes;
         qt_libname="qt-mt";
       elif test -f $T/libqt-mt3.a; then
         ac_cv_qt_lib=$T;
         qt_mt=yes;
         qt_libname="qt-mt3";
       elif test -f $T/libqt-mt2.a; then
         ac_cv_qt_lib=$T;
         qt_mt=yes;
         qt_libname="qt-mt2";
       elif test -f $T/libqt.so -o -f $T/libqt.a; then
         ac_cv_qt_lib=$T;
         qt_mt=no;
         qt_libname="qt";
       elif test -f $T/libqt3.a; then
         ac_cv_qt_lib=$T;
         qt_mt=no;
         qt_libname="qt3";
       fi
     fi
  done
]);

if test "x$ac_cv_qt_lib" = "x"; then
  echo "not found. Giving up."
  exit
fi

AC_CACHE_VAL(ac_cv_qt_libname,
   ac_cv_qt_libname="$qt_libname"
)

 
AC_CACHE_CHECK(if Qt is multi-threaded,
  ac_cv_qt_mt,
  ac_cv_qt_mt=$qt_mt;
)

AC_MSG_CHECKING(whether to enable thread)
thread_default="yes"
AC_ARG_ENABLE(thread, [  --enable-thread=[no/yes] turn on threads
                       [default=yes]],, enable_thread=$thread_default)
AC_SUBST(AUDIO_MOC)
AUDIO_MOC="dspaudioout.moc.o dspaudioin.moc.o"
if test "$ac_cv_qt_mt" = "yes"; then
  if test "$enable_thread" = "yes"; then
    AC_DEFINE(QT_THREAD_SUPPORT)
    AUDIO_MOC=""
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
fi

CFLAGS="-I$ac_cv_qt_inc -Wall"
LIBS="-L$ac_cv_qt_lib -l$ac_cv_qt_libname -L/usr/local/lib -L/usr/X11R6/lib64 -L/usr/X11R6/lib"

dnl Check for X libraries.
AC_LANG_C
AC_CHECK_LIB(X11, main)
AC_CHECK_LIB(Xext, main)
AC_CHECK_LIB(Xt, main)
AC_CHECK_LIB(ICE, main)
AC_CHECK_LIB(SM, main)

dnl Find libraries png and ssl
AC_CHECK_LIB(png, main)
AC_CHECK_LIB(ssl, [main], [], [AC_MSG_ERROR([libssl not found])])
AC_CHECK_HEADER(openssl/md5.h, [], [AC_MSG_ERROR([openssl/md5.h not found])])

dnl ALSA
AC_SUBST(ALSA)
ALSA="dspoutalsa.o"
AC_SUBST(LIBALSA)
LIBALSA="-lasound"
AC_CHECK_LIB(asound, [main], [], [ALSA="" LIBALSA=""])
AC_CHECK_HEADER(alsa/asoundlib.h, [], [ALSA="" LIBALSA=""])
if test "$ALSA" != ""; then
  AC_MSG_CHECKING(whether to enable ALSA)
  alsa_default="yes"
  AC_ARG_ENABLE(alsa, [  --enable-alsa=[no/yes] turn on alsa
                       [default=yes]],, enable_alsa=$alsa_default)
  if test "$enable_alsa" = "yes"; then
    AC_DEFINE(ALSA_SUPPORT) 
    AC_MSG_RESULT(yes)
  else
    ALSA=""
    LIBALSA=""
    AC_MSG_RESULT(no)
  fi
fi
  
dnl JACK
AC_SUBST(JACK)
JACK="dspaudiojackout.o dspaudiojackin.o"
AC_SUBST(LIBJACK)
LIBJACK="-ljack"
AC_CHECK_LIB(jack, [main], [], [JACK="" LIBJACK=""])
AC_CHECK_HEADER(jack/jack.h, [], [JACK="" LIBJACK=""])
if test "$JACK" != ""; then
  AC_MSG_CHECKING(whether to enable JACK)
  jack_default="no"
  AC_ARG_ENABLE(jack, [  --enable-jack=[no/yes] turn on jack
                       [default=no]],, enable_jack=$jack_default)
  if test "$enable_jack" = "yes"; then
    AC_DEFINE(JACK_SUPPORT) 
    AC_MSG_RESULT(yes)
  else
    JACK=""
    LIBJACK=""
    AC_MSG_RESULT(no)
  fi
fi
  
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl Checks for library functions.
AC_CHECK_FUNCS(select)

AC_MSG_CHECKING(whether to enable debugging)
debug_default="no"
AC_ARG_ENABLE(debug, [  --enable-debug=[no/yes] turn on debugging
                       [default=no]],, enable_debug=$debug_default)
if test "x$enable_debug" = "xyes"; then
         CFLAGS="$CFLAGS -g -DDEBUG"
AC_MSG_RESULT(yes)
else
CFLAGS="$CFLAGS -O3"
AC_MSG_RESULT(no)
fi

dnl Tests for Qt library
AC_LANG_CPLUSPLUS

AC_OUTPUT(Makefile kphone/Makefile dissipate2/Makefile ilbc/Makefile gsm/Makefile icons/Makefile po/Makefile)

echo ""
echo "Now type 'make', followed by 'make install' as root."
echo ""
